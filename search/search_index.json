{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CMU 17-356: Software Engineering for Startups","text":""},{"location":"#17-356-software-engineering-for-startups","title":"17-356 Software Engineering for Startups","text":""},{"location":"#this-week","title":"This Week","text":"Lectures &amp; Readings                           Structure of a Startup                  calendar_month                     Tue March 11                                       Team Roles                  calendar_month                     Thu March 13                           Recitation                       Team Work Session                       Office Hours      <p>Professor office hours held at their offices. See class calendar below for exact times!</p> <p>Jacqueline's office hours will be held Tuesdays 4-5pm.</p> <p>Aditya's office hours will be held Wednesdays 4-5pm.</p>          Current Assignment                       P2: Project Milestone 1              calendar_month                 Tues March 25 @ 11:59pm                       Upcoming Assignments                       P3: Project Milestone 2              calendar_month                 Released               calendar_month                 Tues April 8 @ 11:59pm"},{"location":"#important-links","title":"Important Links","text":"Canvas   Slack   Gradescope   GitHub"},{"location":"#office-hours-calendar","title":"Office Hours Calendar","text":""},{"location":"#weekly-schedule","title":"Weekly Schedule","text":"Date Lecture Reading Recitation Homework Deadline Mon Jan 13 User Discovery descriptionHandout                      HW 0: Skills Survey                      January 21, 2025, 11:59pm                      descriptionInstructions                      Tue Jan 14                              Course Introduction                                                   The Mom Test (chapters 1, 2, 3, 6)                      HW1: User Discovery                      January 21, 2025, 11:59pm                      descriptionInstructions                      Wed Jan 15 Thu Jan 16                              Product Ideation and Discovery                          Fri Jan 17 Mon Jan 20 Viability Analysis descriptionHandout                      Tue Jan 21                              Minimal Viable Product (MVP)                          HW2: MVP Creation                      January 28, 2025                      descriptionInstructions                      Wed Jan 22 Thu Jan 23                              Evaluating Viability                          Fri Jan 24 Mon Jan 27 Node Web Apps descriptionHandout                      Tue Jan 28 MVP Presentations P0: Team Contracts                      February 4, 2025                      descriptionInstructions                      Wed Jan 29 Thu Jan 30 Team Forming and Norming Fri Jan 31 Mon Feb 03 GitHub descriptionHandout                      Tue Feb 04                              Coding as a Team Part 1                          HW3: GitHub Basics                      February 11, 2025                      descriptionInstructions                      Wed Feb 05 Thu Feb 06                              Coding as a Team Part 2                          P1: Project Specification                      February 27, 2025                      descriptionInstructions                      Fri Feb 07 Mon Feb 10 Unit testing descriptionHandout                      Tue Feb 11                              Code Review                          HW4: Testing                      February 18, 2025                      descriptionInstructions                      Wed Feb 12 Thu Feb 13                              Testing                          Fri Feb 14 Mon Feb 17 App Deployment Tue Feb 18                              CloudOps                          HW5: DevOps                      February 25, 2025                      descriptionInstructions                      Wed Feb 19 Thu Feb 20                              Monitoring Services                          Fri Feb 21 Mon Feb 24 P1 Presentations Tue Feb 25 Technical Debt P2: Project Milestone 1                      March 25, 2025                      descriptionInstructions                      Wed Feb 26 Thu Feb 27                              Security                          Fri Feb 28 Mon Mar 03 Tue Mar 04 Spring Break - NO CLASS Wed Mar 05 Thu Mar 06 Spring Break - NO CLASS Fri Mar 07 Mon Mar 10 Team Work Session Tue Mar 11                              Structure of a Startup                          Wed Mar 12 Thu Mar 13                              Team Roles                          Fri Mar 14 Mon Mar 17 Team Work Session Tue Mar 18 Pitching Wed Mar 19 Thu Mar 20 Guest Lecture: Startup Funding. CMU Prof. Riad Wahby (Co-Founder and CEO: Cubist) P3: Project Milestone 2                      April 8, 2025                      descriptionInstructions                      Fri Mar 21 Mon Mar 24 Milestone 1 Presentations Tue Mar 25                              Joining a Startup                          Wed Mar 26 Thu Mar 27                              Pivoting                          Fri Mar 28 Mon Mar 31 Team Work Session Tue Apr 01                              AI Startups                          Wed Apr 02 Thu Apr 03 Spring Carnival - NO CLASS Fri Apr 04 Mon Apr 07 Milestone 2 Presentations Tue Apr 08 Guest Lecture - Matt Welsh (Head of AI Systems at Palantir) P4: Project Milestone 3                      April 24, 2025                      descriptionInstructions                      Wed Apr 09 Thu Apr 10 Guest Lecture - Prof. Austin Henley (formerly CTO of BYBE, Inc.) Fri Apr 11 Mon Apr 14 Tue Apr 15                              Ethics                          Wed Apr 16 Thu Apr 17                              Pivot Challenge                          P5: Final Product Report and Presentation                      May 5, 2025                      descriptionInstructions                      Fri Apr 18 Mon Apr 21 Milestone 3 Presentations Tue Apr 22                              In Class Bug Bash                          Wed Apr 23 Thu Apr 24                              Final Class - Summary                          Fri Apr 25 Mon Apr 28 Tue Apr 29 Wed Apr 30 Thu May 01 Fri May 02 Mon May 05 Final Presentations - You Must Attend in Person Tue May 06 Wed May 07 Grades Due to CMU Thu May 08"},{"location":"#staff","title":"Staff","text":""},{"location":"#instructors","title":"Instructors                 Fraser Brown                              Andrew Begel","text":"mail                                       public                                       mail                                       public"},{"location":"#teaching-assistants","title":"Teaching Assistants                 Aditya Shrivastava                              Jacqueline Tsai","text":"mail                                       mail"},{"location":"dronuts/","title":"CMU 17-356: Dronuts Project","text":""},{"location":"dronuts/#17-356-software-engineering-for-startups-project-1","title":"17-356 Software Engineering for Startups Project 1","text":""},{"location":"dronuts/#context","title":"Context","text":"<p>Two of your close friends run a successful artisanal donut shop in the Lawrenceville neighborhood of Pittsburgh, PA. Looking for ways to expand their business, they reach out to you, knowing that you will apply your skills for startup engineering to the problem.</p>"},{"location":"dronuts/#background-donuts","title":"Background: Donuts","text":"<p>Donuts are America's favorite pastry, topping $15bn<sup>1</sup> in sales annually.  However, two key factors have limited their market saturation:</p> <ul> <li> <p>Short shelf-life   Unlike other pastries (like cookies or muffins), donuts   retain optimal texture for only one to two days after baking.   This means they must be sold quickly after baking and consumed rapidly, making   efficient distribution essential.</p> </li> <li> <p>Poor afternoon sales    Most people buy donuts out of convenience while   purchasing their morning coffee. Rival donut company Dunkin'   Donuts reported to shareholders that approximately 70%   of their sales occur before 11am.<sup>2</sup>   This likely indicates an untapped market of individuals who   are interested in purchasing donuts, but find it too inconvienient   after their morning stop.</p> </li> </ul>"},{"location":"dronuts/#background-drones","title":"Background: Drones","text":"<p>A reclusive (and entirely fictional) genius has finally developed a safe and cost-effective lithium-air<sup>3</sup> battery!  This technology enables the development of lightweight unmanned aerial vehicles (UAVs), better known as drones. These new batteries improve the flight time of small drones (the size of the Iris Pixhawk+,<sup>4</sup> say) by an order of magnitude (from 16-20 minutes to 1-2 hours).</p> <p>Inspired by Elon Musk's decision to open-source Tesla's patents, <sup>5</sup>, the inventory decided to do the same with his battery.  This led to the commoditization of drone-based mobility, which has redefined the way we use drones in a number of ways:</p> <ul> <li>DroneTech, a major player in the UAV market, has created a highly advanced   drone mobility solution; enabling you to purchase off-the-shelf drones,   and send them to perform deliveries using a REST API.</li> <li>Capitalizing on this, Amazon Prime Air, a drone delivery service for retail items,   has seen mainstream use.  Most consumers have designated drone delivery points   at their home, making delivery failures unlikely.</li> <li>The widespread adoption of drone technologies has led to modification of FAA   regulations on drone usage, allowing platforms like DroneTech's to opaquely   negotiate airspace access with FAA servers.</li> </ul> <p>This is exciting; these developments alleviate most of the fundamental barriers to home delivery of a cheap good via drone.</p>"},{"location":"dronuts/#your-idea","title":"Your Idea","text":"<p>You have a brainflash: software built atop the DroneTech API, coupled with a small fleet of the new drones, could help you capitalize on the vast untapped afternoon donut market!  Your donut-making friends are intrigued, and think drone-based donut delivery could work.  They're not very tech-savvy, and they have their hands full with the existing business, so they'd rather serve as your first partner/supplier than as co-founders.  However, they have a couple of other friends at CMU, to whom they introduce you.  With those classmates, you officially found Dronuts, a startup company which delivers fresh donuts via drone.  You pool your resources and buy an initial fleet of 6 drones.</p>"},{"location":"dronuts/#your-product","title":"Your Product","text":"<p>Your basic idea is to build a cloud-backed web application,<sup>6</sup> with which several types of users will interact, approximately as follows:</p> <ul> <li>A donut-buying customer will use the app to select donuts from a menu   of items offered by the donut shop.</li> <li>The app will redirect customers to an external payment service, CommerceFriend,   to enter payment details for their items.</li> <li>The app will identify a suitable drone to perform the delivery based   on availability and battery life.  Various factors may influence battery life,   including distance, weight of the package, and weather/wind. Fortunately,   DroneTech's API includes a sophisticated algorithm for managing battery capacity,   allowing the drone to automatically return to the shop if the battery level is critical.</li> <li>The app will relay the order to the donut shop in Lawrenceville,   and will instruct employees which drone items are to be loaded into.   Once loaded, the app should send the drone out for delivery.</li> <li>The customer will be able to track the progress of their delivery in real-time   using the app, so they know when to retrieve the items from the drone.</li> </ul> <p>(For the purposes of the course, you don't need to worry about the actual physical drone hardware beyond the software considerations surrounding battery life.)</p> <p>This initial outline is deliberately open-ended, as we intend for you to apply and practice the skills you learn in this class in a realistic startup context.</p> <p>Over the course of the first half of the semester (eight weeks), you will work with your classmates to design, implement and analyze the software for this (hyopthetical) new startup.</p>"},{"location":"dronuts/#end-game","title":"End game?","text":"<p>You envision a number of ways this idea might make you fantastically wealthy. Maybe you and your friends will build a country-spanning artisinal delivery donut shop empire.  Maybe Amazon Go will take an interest, and acquire you for a fantastic sum.  Maybe Dunkin' Donuts will agree to license your SaaS platform, again for a fantastic sum.  The sky's the limit!  You just need to get the whole thing off the ground...</p>"},{"location":"dronuts/#citations-and-footnotes","title":"Citations and Footnotes","text":"<p>1:  IBIS World 2017. </p> <p>2:  Dunkin' Donuts U.S. Marketing 2015.</p> <p>3: Lithium-air batteries have been a theoretical possibility and the subject of research for decades. Wikipedia has more.</p> <p>4: The IRIS quadcopter.</p> <p>5: \"All Our Patents are Belong to You\", Tesla blog, 06/12/2014</p> <p>6: The course staff acknowledges that a mobile app probably does make more sense in this context; we are stipulating a web application for pedagogical purposes.</p>"},{"location":"overview/","title":"Course Overview","text":""},{"location":"overview/#course-description","title":"Course Description","text":"<p>Startup engineering is critical to innovation. The skills required to effectively prototype, launch, and scale products are vital to engineers everywhere, from fledgling companies founded in dorm rooms to local mid-size companies to internal startups from multi-national tech giants. However, developing software in a startup environment poses unique engineering challenges. These challenges include making and justifying foundational architectural and technical decisions despite extreme uncertainty; rapidly prototyping and evaluating new ideas and features, while building minimum viable products; prioritizing engineering effort in severely constrained environments; and communicating effectively both within a small engineering team and with internal and external non-technical stakeholders. This course teaches the skills necessary to engineer successfully in a startup environment, through lectures, group projects, case study discussions, and guest speakers drawn from experienced, practicing startup engineers.</p>"},{"location":"overview/#course-overview","title":"Course Overview","text":"<p>In this course, we will teach you the engineering skills necessary to succeed in the highly-uncertain environment associated with a technology startup.  Our focus in this class is mostly technical, but we will cover some parts of the business side of the startup equation. If you're most interested in entrepreneurship, we encourage you to consider 15-390, Entrepreneurship for Computer Scientists.</p> <p>This class will consist of:</p> <ul> <li>Lectures. Lectures will cover technical content, and be delivered by the   professors or other instructors.</li> <li>Guest lectures and panels. We will hear from from practicing software   engineers, technical and non-technical startup cofounders, and other   individuals with practical expertise.</li> <li>Recitation. TAs will lead recitation, which consists of activities designed to help you apply your knowledge practically and prepare for the   homework.</li> <li>Homework assignments. For the first half of the course, you will practice cloud-oriented development skills that we learn in class. Many of these skills focus things you need to do while working as a team. </li> <li>A project. During this course, you will develop an idea for a startup company from start to finish. You will work in teams to develop the startup's idea, understand its market, develop a prototype implementation, and learn to pitch the idea to recruit collaborators and raise funding. Most of this work will be structured as a series of Agile-style sprints, to simulate as much as possible the real startup experience.  </li> </ul> <p>There will be no exams. The final exam day will be used for final project presentations.</p>"},{"location":"schedule/","title":"Weekly Schedule","text":"Date Lecture Reading Recitation Homework Deadline Mon Jan 13 User Discovery descriptionHandout                      HW 0: Skills Survey                      January 21, 2025, 11:59pm                      descriptionHandout                      Tue Jan 14                          Course Introduction                                               The Mom Test (chapters 1, 2, 3, 6)                      HW1: User Discovery                      January 21, 2025, 11:59pm                      descriptionHandout                      Wed Jan 15 Thu Jan 16                          Product Ideation and Discovery                      Fri Jan 17 Mon Jan 20 Viability Analysis descriptionHandout                      Tue Jan 21                          Minimal Viable Product (MVP)                      HW2: MVP Creation                      January 28, 2025                      descriptionHandout                      Wed Jan 22 Thu Jan 23                          Evaluating Viability                      Fri Jan 24 Mon Jan 27 Node Web Apps descriptionHandout                      Tue Jan 28 MVP Presentations P0: Team Contracts                      February 4, 2025                      descriptionHandout                      Wed Jan 29 Thu Jan 30 Team Forming and Norming Fri Jan 31 Mon Feb 03 GitHub descriptionHandout                      Tue Feb 04                          Coding as a Team Part 1                      HW3: GitHub Basics                      February 11, 2025                      descriptionHandout                      Wed Feb 05 Thu Feb 06                          Coding as a Team Part 2                      P1: Project Specification                      February 27, 2025                      descriptionHandout                      Fri Feb 07 Mon Feb 10 Unit testing descriptionHandout                      Tue Feb 11                          Code Review                      HW4: Testing                      February 18, 2025                      descriptionHandout                      Wed Feb 12 Thu Feb 13                          Testing                      Fri Feb 14 Mon Feb 17 App Deployment Tue Feb 18                          CloudOps                      HW5: DevOps                      February 25, 2025                      descriptionHandout                      Wed Feb 19 Thu Feb 20                          Monitoring Services                      Fri Feb 21 Mon Feb 24 P1 Presentations Tue Feb 25 Technical Debt P2: Project Milestone 1                      March 25, 2025                      descriptionHandout                      Wed Feb 26 Thu Feb 27                          Security                      Fri Feb 28 Mon Mar 03 Tue Mar 04 Spring Break - NO CLASS Wed Mar 05 Thu Mar 06 Spring Break - NO CLASS Fri Mar 07 Mon Mar 10 Team Work Session Tue Mar 11                          Structure of a Startup                      Wed Mar 12 Thu Mar 13                          Team Roles                      Fri Mar 14 Mon Mar 17 Team Work Session Tue Mar 18 Pitching Wed Mar 19 Thu Mar 20 Guest Lecture: Startup Funding. CMU Prof. Riad Wahby (Co-Founder and CEO: Cubist) P3: Project Milestone 2                      April 8, 2025                      descriptionHandout                      Fri Mar 21 Mon Mar 24 Milestone 1 Presentations Tue Mar 25                          Joining a Startup                      Wed Mar 26 Thu Mar 27                          Pivoting                      Fri Mar 28 Mon Mar 31 Team Work Session Tue Apr 01                          AI Startups                      Wed Apr 02 Thu Apr 03 Spring Carnival - NO CLASS Fri Apr 04 Mon Apr 07 Milestone 2 Presentations Tue Apr 08 Guest Lecture - Matt Welsh (Head of AI Systems at Palantir) P4: Project Milestone 3                      April 24, 2025                      descriptionHandout                      Wed Apr 09 Thu Apr 10 Guest Lecture - Prof. Austin Henley (formerly CTO of BYBE, Inc.) Fri Apr 11 Mon Apr 14 Tue Apr 15                          Ethics                      Wed Apr 16 Thu Apr 17                          Pivot Challenge                      P5: Final Product Report and Presentation                      May 5, 2025                      descriptionHandout                      Fri Apr 18 Mon Apr 21 Milestone 3 Presentations Tue Apr 22                          In Class Bug Bash                      Wed Apr 23 Thu Apr 24                          Final Class - Summary                      Fri Apr 25 Mon Apr 28 Tue Apr 29 Wed Apr 30 Thu May 01 Fri May 02 Mon May 05 Final Presentations - You Must Attend in Person Tue May 06 Wed May 07 Grades Due to CMU Thu May 08"},{"location":"staff/","title":"Staff","text":""},{"location":"staff/#instructors","title":"Instructors","text":"Fraser Brown                                   mail                                       public                                   Andrew Begel                                   mail                                       public"},{"location":"staff/#teaching-assistants","title":"Teaching Assistants","text":"Aditya Shrivastava                                   mail                                   Jacqueline Tsai                                   mail"},{"location":"syllabus/","title":"Syllabus","text":""},{"location":"syllabus/#logistics-and-communication","title":"Logistics and Communication","text":""},{"location":"syllabus/#lectures","title":"Lectures","text":"<ul> <li>Tues @ 12:30pm - 1:50pm (MM 103)</li> <li>Thurs @ 12:30pm - 1:50pm (MM 103)</li> </ul>"},{"location":"syllabus/#recitations","title":"Recitations","text":"<ul> <li>Section A (Jacqueline Tsai): Fri @ 9:00am - 09:50am (PH A18B)</li> <li>Section B (Aditya Shrivastava): Fri @ 11:00am - 11:50am (WEH 5415)</li> </ul>"},{"location":"syllabus/#prerequisites","title":"Prerequisites","text":"<p>15-214/17-214 or 15-213, or equivalent.  The focus of this class is largely team-based technical work; the goal of the prerequisites is to ensure students have sufficient programming experience to succeed in the course.</p>"},{"location":"syllabus/#textbookreadings","title":"Textbook/Readings","text":"<p>We will be reading The Lean Startup, The Mom Test, and a selection of online sources. </p>"},{"location":"syllabus/#communication","title":"Communication","text":"<p>The course uses Canvas for homework submission, grading, announcements, and supplementary documents. Discussion and questions will be managed on Slack. Slides, assignments and the schedule will be posted on this website. We use GitHub to coordinate group work.  We will provide private GitHub repositories for individuals and groups.</p> <p>Please use Slack for discussion and questions, including clarifying homework assignments. If you need to write to Prof. Begel and/or Prof. Brown about the class, you must include both faculty members on the message, otherwise we will reject your message and ask you to resend to both of us. We prefer you write us on Slack instead of email.</p> <p>The instructors and TAs hold weekly office hours. If you cannot make it to office hours, contact us via email (using the course-wide email address, unless the issue is sensitive) and we will find an alternative time to meet.</p> <p>If you have a question or concern unsuitable for Slack, contact the instructors via: startups-staff@lists.andrew.cmu.edu. Unless the subject matter is sensitive, all questions will be conveyed to all instructors before being answered, so there's no point in emailing just one of us.</p> <p>Note that the list should be set to accept messages from any CMU email address; if your message is held as a non-member posting to a members list, don\u2019t worry: we respond to moderation requests very quickly.</p> <p>For sensitive matters, of course, feel free to contact us individually.</p>"},{"location":"syllabus/#grading","title":"Grading","text":"<p>Evaluation will be based on the following approximate distribution: 55% assignments, 35% final project, 10% participation.</p> <p>Note: Attendance is required for guest lectures. Absences during guest lectures (without previously arranged accommodations) will result in a deduction in your overall course grade for participation.</p>"},{"location":"syllabus/#course-policies","title":"Course Policies","text":""},{"location":"syllabus/#teamwork","title":"Teamwork","text":"<p>Teamwork is an essential part of this course. Teams of 3-5 students will be assigned by the instructors and stay together for multiple assignments. Most assignments have a component that is graded for the entire group and a component that is graded individually. By default, group assignments will receive a single grade, for all individuals.  However, we reserve the right to institute peer grading in problematic situations, as detailed in the Team Policy.</p> <p>Please fill out the Teamwork Survey so we can begin forming groups.</p>"},{"location":"syllabus/#late-work","title":"Late Work","text":"<p>The first late assignment will incur a 10% penalty per day, and the second will receive no credit. We make exceptions in extraordinary circumstances, typically involving either a family or medical emergency (ideally, your academic advisor or the Dean of Student Affairs should request such exceptions on your behalf). We can make accommodations for travel (e.g., for interviews) so long as you request it in advance.  Always communicate with your team about such issues.</p>"},{"location":"syllabus/#devices-in-lecture-and-recitation","title":"Devices in Lecture and Recitation","text":"<p>Research shows that using devices for non-class related activities harms both the device user's learning and other students' learning as well.  Therefore, in general, we do not allow the use of devices during lectures. However, if you genuinely use your laptop for class-related activities (note-taking, etc), tell us, and we will consider an exception. You will be required to sit in the back row of the lecture to minimize the impact your screen has on others.</p> <p>Both recitation and lecture activities may involve devices, though, so please bring your laptop to both!</p>"},{"location":"syllabus/#time-management","title":"Time Management","text":"<p>This is a 12-unit course.  It is our intention to manage it so that you spend close to 12 hours a week on the course, on average. In general, 4 hours/week will be spent in class and recitation, and 8 hours on assignments. A key challenge in startup engineering is that there is never enough time to implement everything that you want to implement; it is therefore important that you practice time management, estimation, and task prioritization.  We would rather you make well-justified decisions to not do something than spend tens of hours on your homework.</p> <p>Note that most homework is done in groups, so please account for the overhead and decreased time flexibility that entails.</p> <p>Feel free to give the course staff feedback on how much time the course is taking for you.  This is especially relevant as we teach this course for the first time!</p>"},{"location":"syllabus/#writing","title":"Writing","text":"<p>Describing tradeoffs, justifying decisions, and communicating effectively with less technical stakeholders are key learning goals of this course. Most homework assignments have a component that requires discussing issues in written form or reflecting on experiences. The Student Academic Success Center offers one-on-one writing help for students, along with workshops. The instructors are also happy to provide additional guidance if requested.</p>"},{"location":"syllabus/#academic-honesty-and-collaboration","title":"Academic Honesty and Collaboration","text":"<p>The University Policy on Academic Integrity applies. Most assignments are done in groups. Our expectations regarding academic honesty and collaboration for group work are the same as for individual work, elevated to the level of \"group.\" Group members will collaborate with one another, but groups should work independently from one another, not exchanging code with other groups. Within groups, we expect that you are honest about your contribution to the group's work. This implies not taking credit for others' work and not covering for team members that have not contributed to the team.</p> <p>The course also includes individual assignments and individual components of group assignments. Although your solutions for individual parts may be based on the content produced for the group component (e.g., written reflections), we expect you to complete individual components independently of your groupmates.</p> <p>Regarding the internet, StackOverflow, and similar sources: In real-world development, engineers often adapt code from Q&amp;A sites, open source repositories, or similar sources to new ends.  This is acceptable in this course, with two caveats:</p> <ul> <li>You may not copy a solution for our homework assignments specifically from another student or group, even if, for some reason, that code is available openly on GitHub or elsewhere (see below on the importance of keeping your homework code).</li> <li>You must test all of your code, and those tests must pass.  That is, you must understand any code you adapt from the internet, and you must demonstrate that understanding using unit tests.</li> </ul> <p>Regarding solutions from other students in the course, we reuse the Collaboration Policy from 15-214, with minor modifications:</p> <p>\"You may not copy any part of a solution to a problem that was written by another student, or was developed together with another student.  You may not look at another student's solution, even if you have completed your own, nor may you knowingly give your solution to another student or leave your solution where another student can see it.  Here are some examples of behavior that are inappropriate:</p> <ul> <li>Copying or retyping, or referring to, files or parts of files (such as   source code, written text, or unit tests) from another person (whether in   final or draft form, regardless of the permissions set on the associated   files) while producing your own. This is true even if your version includes   minor modifications such as style or variable name changes or minor logic   modifications.</li> <li>Getting help that you do not fully understand, and from someone whom you do   not acknowledge on your solution.</li> <li>Writing, using, or submitting a program that attempts to alter or erase   grading information or otherwise compromise security of course resources</li> <li>Lying to course staff.</li> <li>Giving copies of work to others, or allowing someone else to copy or refer   to your code or written assignment to produce their own, either in draft or   final form. This includes making your work publicly available in a way that   other students (current or future) can access your solutions, even if others'   access is accidental or incidental to your goals. Beware the privacy settings   on your open source accounts!</li> <li>Coaching others step-by-step without them understanding your help.</li> </ul> <p>If any of your work contains any statement that was not written by you, you   must put it in quotes and cite the source. If you are paraphrasing an idea you   read elsewhere, you must acknowledge the source. Using existing material   without proper citation is plagiarism, a form of cheating. If there is any   question about whether the material is permitted, you must get permission in   advance. We will be using automated systems to detect software plagiarism.</p> <p>It is not considered cheating to clarify vague points in the assignments,   lectures, lecture notes; to give help or receive help in using the computer   systems, compilers, debuggers, profilers, or other facilities; or to discuss   ideas at a high level, without referring to or producing code.</p> <p>Any violation of this policy is cheating. The minimum penalty for cheating   (including plagiarism) will be a zero grade for the whole assignment. Cheating   incidents will also be reported through University channels, with possible   additional disciplinary action (see the above-linked University Policy on   Academic Integrity).</p> <p>If you have any question about how this policy applies in a particular   situation, ask the instructors or TAs for clarification.\"</p> <p>Note that the instructors respect honesty in these (and indeed most!)   situations.</p>"},{"location":"syllabus/#a-note-on-self-care","title":"A Note on Self-Care","text":"<p>All of us benefit from support during times of struggle. You are not alone. Besides the instructors, who are here to help you succeed, there are many helpful resources available on campus and an important part of the college experience is learning how to ask for help. Asking for support sooner rather than later is often helpful.</p> <p>If you or anyone you know experiences any academic stress, difficult life   events, or feelings like anxiety or depression, we strongly encourage you to   seek support. Counseling and Psychological Services (CaPS) is here to help:   call 412-268-2922 and visit their website. Consider   reaching out to a friend, faculty or   family member you trust for help getting connected to the support that can   help.</p>"},{"location":"teamwork/","title":"Teamwork Practices","text":""},{"location":"teamwork/#working-effectively","title":"Working effectively","text":"<p>Working effectively in a group is a critical skill in modern software   engineering, both in the startup context and generally.  Group work can be   hard, and not all teams succeed, and in fact a major contributing factor to   startup failure is team breakdown. The educational context adds its own   complexities: team members sometimes cannot prepare for or attend group   sessions because of other responsibilities, and conflicts can result from   personalities, differing skill levels, work ethics, working styles.</p> <p>We encourage the following practices to ensure successful group work:</p> <ul> <li>Agree on a protocol for meeting and communication.  Some, but not all, of   these decisions will be technical (Slack? Trello?) that arise naturally over   startup development.</li> <li>In the startup context, engineers must be flexible and capable of filling   many technical roles.  In an educational context, however, group work is most   successful when groups designate clear roles, such as coordinator, scribe,   monitor, and checker for each assignment. Agree on roles at the beginning of   each assignment. Rotate these roles for each assignment to ensure   fairness.</li> <li>Agree on meeting times and what each member should have done before the   meeting (readings, development, writing, taking the first cut at some or all   of the assigned work, etc.). The scribe documents the agreed tasks and   deadlines and communicates them to everybody. Not objecting to the   communicated protocol constitutes acceptance. Make agreements visible to every   team member, with transparent history of the log.</li> <li>The coordinator checks with other team members before the meeting to   remind them of when and where they will meet and what they are supposed to   do. Team members notify the coordinator in advance if they cannot attend a   meeting or are in danger of not making a deadline.</li> <li>All individuals perform the required individual preparation before the   meeting.</li> <li>During meetings/work times, the coordinator sets  the agenda, and   keeps everyone on task; the monitor ensures everyone understands both   the solution and the strategy used to get it, and watches the time to ensure   meetings stays within the agreed timeslot; and the checker double-checks the   result before it is handed in, and submits it (or clearly delegates its   submission, if the checker is unable to do so on time).</li> <li>At the end of each meeting, agree on the next meeting time and responsibilities.</li> <li>Review returned assignments together. Make sure everyone understands why   points were lost and how to correct errors.</li> </ul>"},{"location":"teamwork/#preventing-and-dealing-with-problems","title":"Preventing and dealing with problems","text":"<p>We encourage you to communicate openly with your teammates, which is often enough to help resolve many types   of team challenges. Clearly documenting agreed-upon tasks and deadlines (see   scribe role above) and tracking invested time helps in identifying   issues. Renegotiate agreements when estimated time does not align with   actually required time and imbalances arise. Document where agreements were   not honored (what and when, and possibly why). Identify a fallback strategy,   ideally in agreement with the team member who failed the agreement. In severe   cases, identify how other team members can take over those tasks.</p> <p>If a team member does not contribute to an assignment solution, their name   should not be included on the completed work.</p> <p>If the problem persists and cannot be solved within the team, the team should   meet with the instructors so that the problem can be resolved, if possible. If   problems continue, the cooperating team members may notify the uncooperative   member in writing that he/she is in danger of being fired, sending a copy of   the memo to the instructor. If there is no subsequent improvement, they should   notify the individual in writing (copy to the instructor) that he/she is no   longer with the team. The fired student should meet with the instructors to   discuss options, such as finding another team willing to add them as a member,   completing the work alone, or getting zeroes for the remaining   assignments.</p> <p>Consult with your instructors if a conflict arises that can't be worked   through by the team.</p>"},{"location":"assignments/","title":"Index","text":"<p>Coming soon!</p>"},{"location":"assignments/FP1/","title":"Final Project: Team Sprint 1","text":"<p> 100 points  Due on Gradescope Thursday, April 04, 2023, 11:59pm  This final project homework is to be done and submitted as a team. </p>"},{"location":"assignments/FP1/#learning-goals","title":"Learning Goals","text":"<p>Congratulations! Your project has found an investor who expects you to show them an MVP by the end of the semester. You should use the knowledge and experience you gained during the semester to build the MVP and satisfy that investor. We will not set deadlines for you this time. Instead, you must create your own plan. We will monitor your progress. It is your job to manage your time and your team to reach your goals in time.</p> <p>Note: The final sprint will also take into account individual progress, so team management is crucial at this early juncture.</p>"},{"location":"assignments/FP1/#final-project-tasks","title":"Final Project Tasks","text":"<p>In this pre-project sprint, you will create your own GitHub repository (inviting your team members accordingly) and specify user stories that will be included in your MVP and a plan/timeline to achieve them. This plan should include how many sprints you plan to do (within the timeframe), at what cadence, and what you plan to achieve during those sprints. You must also decide upon your tech stack: front-end and backend frameworks, databases, CI, team communication tools, etc.</p> <p>You will also create a project homepage/landing page that should display your project name, logo, the list of team members on an about (sub)page, embed your pitch deck content (not just a pointer to your slides), and contain a two-sentence elevator pitch for what it's all about.</p> <p>We continue to expect you to make proper use of your Kanban board, especially when assigning tasks to (all) team members.</p> <p>We'll be checking to make sure that each team member has tasks/stories assigned to them.</p>"},{"location":"assignments/FP1/#team-contracts","title":"Team Contracts","text":"<p>When working with a team, it is important to discuss each team member\u2019s background and establish common expectations of the team. Miscommunication or the general lack of communication are often the most common causes of team conflict.</p> <p>!!! Note: \"Team Conflict Example\"</p> <p>A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed.</p> <p>You will create a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present. We recommend that you keep it to around 1 page. 2 pages is a hard limit.</p> <p>Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document.</p> <p>You are free to include anything that your team deems necessary, but you should minimally address the following sections:</p> <ol> <li> <p>Expectations</p> <p>How much time is each team member expected to be putting into working on projects? Punctuality? How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)?</p> <p>Do accommodate for the fact that the project load can get heavier towards the end of the semester.</p> </li> <li> <p>Communication</p> <p>What platform (s) will your team be using to communicate? What\u2019s the expected time to get a response?</p> <p>For any communication platforms you decide on, please test that everyone can receive notifications. We highly recommend using apps (Slack, Discord) over browser-based sites.</p> </li> <li> <p>Meeting Schedule</p> <p>When and how will your team meet? What modality would it be?</p> <p>A strong recommendation would be to set up a recurring 1-hour meeting blocked out for the rest of the semester so that your team does not have to scramble to find a common meeting time each week. Teams that have recurring meetings are generally more successful in the class.</p> </li> <li> <p>Responsibilities</p> <p>How will you divide responsibilities for each project? During meetings, who will be in charge of note-taking, organizing and running those meetings?</p> <p>From past courses, we noticed the natural emergence of a project manager in teams, who ensures the project moves towards completion. We highly suggest that you consider how your team would rotate that role amongst team members over the course of the remaining projects. Throughout the semester, we will ask for documentation of your meeting notes, so be sure to keep them organized (we recommend using a shared Google Drive folder).</p> </li> <li> <p>Equitable Contribution &amp; Conflict Resolution</p> <p>What are the steps the team would take among its members to address teammates who are contributing too little? If all attempts to resolve the inequity are unsuccessful, when will the team bring this up to the instructors? What are the steps to bring up and discuss potential teamwork issues?</p> <p>The first thing the staff will do is ask the team if they have followed the steps on their team contract.</p> </li> </ol> <p>Feel free to seek the assistance of TAs and instructors in drafting this document.</p> <p>!!! Note</p> <p>We will ask you to reference, reflect upon, and refine this document throughout this project, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agrees with the final decisions.</p> <p>Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Include this document as part of your submission below.</p> <p>We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel.</p>"},{"location":"assignments/FP1/#team-deliverables","title":"Team Deliverables","text":"<p>A project proposal document uploaded to Gradescope containing the following:</p> <ol> <li>A short intro/motivation for your startup and product (1-2 paragraphs).</li> <li>A link to your project homepage/landing page. This static site should include:<ul> <li>your project name and project logo.</li> <li>the list of team members on an about (sub)page.</li> <li>an embed of your pitch deck content (not just a pointer to your slides).</li> <li>a two-sentence elevator pitch for what it\u2019s all about.</li> </ul> </li> <li>A link to your team's GitHub repository, which you should create    for this project and invite members of your team to.</li> <li>Set of prioritized user stories that will be included in your MVP.    (Recall HW2).<ul> <li>You should have a project backlog in some online tool that your team   members can use to collaborate with; e.g., GitHub Projects, GitHub Issues,   Trello, Zenhub, etc. Include a printout in PDF format of this backlog with   your proposal. All user stories must have at least one team member   attached.</li> </ul> </li> <li>A list of user interfaces your product should contain, along with wireframes    for each (Recall HW3).</li> <li>A list of what you will use in your tech stack: backend framework, front-end    framework, database, etc. Agree upon and list your communication tools    (e.g., Slack, etc), and development infrastructure (development environment,    CI, code style/linting). Agree upon and list where you will deploy your    application (e.g. Render, fly.io, Azure, Heroku, AWS, etc).</li> <li>Plan/timeline you anticipate following to build the MVP.<ul> <li>How many sprints will you do? What will the cadence be? What will you   accomplish during each sprint? When will each sprint take place?   Schedule them on a calendar.</li> <li>In this plan, you should include how you plan to divide the workload among   team members. Keep in mind that we will evaluate you against your   own timeline, so try to be realistic.</li> </ul> </li> <li>Your team contract (as discussed above).</li> </ol> <p>Note: To evaluate your progress for the rest of this project, we will be scheduling regular meetings with your team for the remainder of the semester. Keep this in mind and take care to plan a realistic schedule.</p>"},{"location":"assignments/FP2/","title":"Final Project: Team Sprint 2","text":"<p> 100 points  Group assignment is due on Gradescope Thursday, April 18, 2024 11:59pm  This homework is to be done and submitted as a team.  A portion of this assignment will be graded for you individually and the other portion will be graded for your team as a whole. </p>"},{"location":"assignments/FP2/#learning-goals","title":"Learning Goals","text":"<p>After several weeks of work, your investors want to see some progress on the product they poured their money into. They have your initial proposed timeline and user stories that you promised to deliver in FP1. Now is the time you show them how much progress you have made on an MVP and how awesome you're team is!</p>"},{"location":"assignments/FP2/#task-management","title":"Task Management","text":"<p>We expect you to make proper use of your Kanban board, especially when assigning tasks to (all) team members. Your board should also demonstrate your current progress on the user stories, identify completed stories, and indicate which stories are done and have been merged into the main branch.</p> <p>For each story that has been started, there should be a work in progress (WIP) pull request (PR) open with a title that ties it to the story in the backlog. This PR should be opened when the task is started, not when the work is done. Name the new PR \"WIP: some-feature-here\" and code can then be committed to that PR until the task is done. When the WIP PR is ready for review, simply remove the \u201cWIP\u201d from the PR title, and comment in the PR @-mentioning specific team members to review it.</p> <p>If your team has pivoted your project idea, you must reflect this on your project homepage/landing page (see FP1) and your Kanban board. Mark all old user stories as IRRELEVANT or WONTDO (or some other adjective that implies that you're no longer working on them). Be sure to create user stories to completely describe the new MVP you plan to build.</p>"},{"location":"assignments/FP2/#weekly-check-ins","title":"Weekly Check-ins","text":"<p>You will start having weekly check-ins with your TAs during their office hours (check the calendar online). During check-ins, keep a running document (Google Docs) of the things that were discussed with the TAs as well as a very brief summary of what was done after that meeting to address the feedback you received.</p> <p>Check-ins will be part of your grade!</p>"},{"location":"assignments/FP2/#in-progress-mvp-video-walkthrough","title":"In-progress MVP video walkthrough","text":"<p>Your team should submit a video walkthrough of your prototype thus far:   - Each team member should present a single user story, even if it is still a work in progress.</p> <ul> <li> <p>Your walkthrough should focus on explaining how the software is to be used     from a user perspective, similar to assignment 4.</p> </li> <li> <p>There are a lot of tools that you can use to prepare your demo video.     Choose the one you\u2019re most comfortable with. We recommend Loom,     a Chrome extension that allows you to easily record a screen grab along     with narration. Another good one is Quicktime Player if you work on a     MacBook.</p> </li> <li> <p>Once you've created your video, upload it to YouTube and make a note of     the URL in your submission.</p> </li> </ul>"},{"location":"assignments/FP2/#team-deliverables","title":"Team Deliverables","text":"<ul> <li>Task Management (50 points) - Submit the URL to your team's Kanban board.</li> <li>1-2 check-ins over this Sprint (10 points)</li> <li>In-progress MVP video walkthrough (40 points)</li> </ul> <p>Submit your Kanban board and in-progress walkthrough video URLs to Gradescope.</p>"},{"location":"assignments/FP2/#demonstration-of-individual-actions","title":"Demonstration of Individual Actions","text":"<p>All team members should be making pull requests (PRs) when adding/pushing new code. As you progress toward your MVP, every individual team member should have a</p> <ul> <li> <p>At least 2 PRs merged with at least one +1 from a reviewer on each.</p> <p>Note: Break up your PRs, separated by feature/story!</p> </li> <li> <p>At least 2 constructive comments on other team member\u2019s PRs (2 separate PRs).</p> </li> </ul> <p>We will visit your GitHub repo to check that these have occurred with timestamps before the assignment deadline of April 18th. If GitHub fails to show any evidence of your work, you will lose points from the individual portion of your grade.</p>"},{"location":"assignments/FP3/","title":"Final Project: Final Team Sprint (3)","text":"<p> 300 points  Group assignment is due on Gradescope Thursday, May 2, 2023 11:59pm Individual assignment is due on Gradescope Thursday, May 2, 2023 11:59pm   The largest portion of this final project is to be done and submitted as a team. The final reflection writeup will be submitted individually. </p>"},{"location":"assignments/FP3/#learning-goals","title":"Learning Goals","text":"<p>After over a month of relentless effort, it's time to impress your investors. You'll unveil an end-to-end MVP that captures your vision and gets them excited about what's to come.</p>"},{"location":"assignments/FP3/#final-project-report","title":"Final Project Report","text":"<p>Although your investors are not interested in the technical details of your work, they respect its importance. Therefore they have hired a technical team to assess the quality of your work and process. Submit a report which includes all important decisions you have made and explain why you have selected one option over another. The assessment team will make judgments based on this report and the content of your team's codebase and Kanban board.</p> <p>Your report should highlight the work you did that we will see during the demo. This could include, but is not limited to:</p> <ul> <li>Why are these features the minimum viable product for this idea?</li> <li>What did you choose to use this technology stack?</li> <li>What was your integration testing plan (link an example of an end-to-end test)?</li> <li>What changed from your original plan?</li> <li>What are your predicted performance bottlenecks?</li> <li>What are 2 potential pivot ideas?</li> <li>What metrics are you collecting and monitoring?</li> <li>What is your strategy for quality assurance/testing?</li> <li>How did your team self-organize? What roles did everyone play?</li> <li>What would be your next 3 features you would implement given more time?</li> <li>How would test viability for your MVP concept?</li> </ul> <p>Note: We expect that each of these questions can be answered in one paragraph or less.</p>"},{"location":"assignments/FP3/#final-project-presentation","title":"Final Project Presentation","text":"<p>In this presentation, you will show your investors (the class!) a walkthrough of your end-to-end MVP. You do not need to include details related to the backend. Your investors are mostly interested in seeing the progress and functionality of your product. Your presentation should be 10-15 minutes and include a demo. You may use slides but are not required to. All team members must participate with each speaking for at least 2 minutes of time.</p> <p>The following presentation elements are required (but may be combined as appropriate):</p> <ul> <li>Introduce your team name, team members, each person's assigned role, and the roles they actually ended up playing in the project.</li> <li>Introduce the main concept of your MVP.</li> <li>A walkthrough of your MVP, organized by user stories, not by features.</li> <li>A demo of your MVP, with everything connected.</li> <li>Describe any external feedback (from outside your team) that you received on your MVP.</li> <li>Point out the coolest part of your MVP.</li> <li>Point out the part of the MVP of which you are most proud.</li> <li>Explain the most important lesson you learned.</li> </ul> <p>Note: All presentations will occur during our final exam slot, Tuesday, April 30, 8:30am-11:30am.</p>"},{"location":"assignments/FP3/#mvprubric","title":"MVP/Rubric","text":"<p>Each of your projects is different, so we would like for you to develop a rubric describing how your project should be graded. This rubric should cover each feature of the project/MVP you are delivering; we will grade your presentation and report separately. Your rubric should total 80 points and should describe how those points should be allocated across the various features of your MVP. A good rubric describes what you have to do to earn full credit, as well as what you would do to earn partial credit. Note: We reserve the right to modify the rubric for the final evaluation, however our goal is to be able to use these rubrics to grade each project in a way that is fair and transparent.</p>"},{"location":"assignments/FP3/#team-post-mortem","title":"Team Post-Mortem","text":"<p>The post-mortem is the place where you can talk as a team about how your software development process worked out during the release cycle. In this class, the post-mortem starts with a team meeting and ends with an individual writeup (for every individual on the team) of the things that went right, the things that went wrong, the things that must be changed for next time, and the lessons you learned from the experience.</p> <p>Here's how it's going to play out.</p>"},{"location":"assignments/FP3/#post-mortem-logistics","title":"Post-Mortem Logistics","text":"<ul> <li>You will schedule a meeting for all of your team's members sometime between Tuesday April 30th, 11:30am and Thursday, May 2, 11:59pm. It has be after your team is done with your project and presentation so you can reflect on everything you have been through together this semester.</li> <li>The meeting will be between 1-2 hours long. No more. No less. People have trouble taking criticism after 2 hours. They'll leave. Less than 1 hour won't cover everything you should be talking about.</li> <li>Individually, before you come to the meeting, think of 3-5 of your top issues (positive and negative) that you want to discuss at the meeting.</li> <li>One of you should bring a pad of post-it notes, one pad for every team member. Also, bring a large sheet of paper (8.5x11\" will be too small). Be sure everyone has a pen. Don't allow the use of any computers or smartphones during the meeting.</li> <li>Choose one person, not the team's CEO, to be the post-mortem facilitator. Usually it's best to pick someone who you feel has been a good listener throughout the project and that everyone (still) respects and likes.</li> </ul>"},{"location":"assignments/FP3/#agenda","title":"Agenda","text":"<ol> <li> <p>Group Reflection</p> <ul> <li>For each team role that someone played on your team (e.g. frontend developer, backend developer, tester, project CEO, project manager, designer, etc.), do the following, one team role at a time. Note: your team probably had 5-10 team roles being played by its 4-5 team members.<ul> <li>Analyze: Fill out post it notes (as many as you want or have) silently with anything that went wrong with the actions of the people while playing that team role.</li> <li>Praise: Fill out post-it notes silently with everything that the people playing that team role did right or did well.</li> <li>Solve: Cluster the post-it notes (analyses and praise) into topic categories. If you do this on a whiteboard wall, it'll be like affinity diagramming!</li> </ul> </li> <li>For each topic cluster, brainstorm together potential solutions (don't go too deep, but don't rule anything out). Brainstorm means listen to one another's suggestions and write them down. Do NOT shoot any ideas down. Brainstorming is supportive, even if you are the subject of discussion.</li> <li>Assign each team member to a set of topic clusters and brainstormed solutions. Each team member should now silently flesh out two unique composite ideas for each topic cluster out of the solutions you are reading. It's ok to be inspired to come up with more, but try not to exceed three.</li> </ul> </li> <li> <p>Spidergraph</p> <ul> <li>On a large sheet of paper, draw a spidergraph. Basically, it's a 9-pointed star made of 9 lines that meet in the middle. At the end of each point of the star, write the following concepts (definitions in the links come from a class previously taught by Andrew Begel at the University of Washington):<ol> <li>Self-regulating</li> <li>Open minded</li> <li>Facile with complexity</li> <li>Tradeoff-aware</li> <li>Honest</li> <li>Resourceful</li> <li>Adaptive</li> <li>Vulnerable</li> <li>Persistent</li> </ol> </li> <li>Pick one concept to begin. Leave the paper in the middle of the group, and pass the pen to a random person. Ask that person to individually (without discussion) rate the team on the concept from 1 to 5 at the end of one of the axes of the star. Draw a small circle on the line where closest to the center is 1 and 5 is at the endpoint of the axis.</li> <li>Pass the pen to the next person, and ask them to individually rate the team on the same concept. Repeat until each person has rated the team on that single concept.</li> <li>Discuss the rankings that everyone gave for that concept. Do you all agree? What does it mean? Is there a spread of values? In response to any differences, or particular values, come up with a list of things that your team could to do improve your ratings for that concept. Write down that list.</li> <li>Once you've finished discussing that word, pick another one, and repeat the process. Once you've finished all 9 points of the star, take a picture of the spidergraph for posterity, and you're done.</li> </ul> </li> <li>Share Out<ul> <li>Now, take everything you've written down for the team post-mortem (e.g., post it notes, brainstorming, and fleshed out solutions) and the Spidergraph (don't forget the picture of the Spidergraph) and email it to everyone on the team, so that they can refer to it for their individual post-mortem deliverable. Note: there is no graded deliverable for the team post-mortem.</li> </ul> </li> </ol>"},{"location":"assignments/FP3/#team-deliverables","title":"Team Deliverables","text":"<ul> <li>Final Project Presentation (85 points)</li> <li>Final Project Peport (85 pts)</li> <li>MVP/Rubric (80 pts)</li> </ul> <p>Present your final project on April 30, between 8:30am-11:30am. We expect everyone to be there!</p> <p>Submit your Final Project Report and MVP/Rubric on Gradescope.</p>"},{"location":"assignments/FP3/#individual-deliverables","title":"Individual Deliverables","text":"<p>Individual Post-Mortem (40 points)</p> <ul> <li>For each team role you discussed in your group reflection, pick your top two analyses and top two praises from the entire set of post its and write them down. Then, pick one brainstormed, worked-through solution that you believe will best address the analyses and preserve the praise. Explain how this solution will help you personally to ensure (or be assured) that your next team experience related to this team role (even if it's never going to be your team role) turns out better.</li> <li>Make a list of the value words, one for each point of the 9-pointed spidergraph star.<ol> <li>Next to each word, write down the person on your team who you personally believe epitomizes that value the most on your team (i.e., from their actions, behavior, and character alone would earn them the highest score) and the score (1-5) they would earn.</li> <li>Compute the average score your team received for that word and write it down.</li> <li>Write down what you believe your own score was at the beginning of the semester, before you worked with your team.</li> <li>Write down what you believe your own score is now, at post-mortem time.</li> <li>If your score improved, tell a story of one experience during this class that helped you become better at that teamwork skill, or helped you realize you were already better at that teamwork skill (the word at the end of that point on the star). The experience does not need to have been related to your class project.</li> <li>Repeat this process for the remaining eight words on the spidergraph star.</li> </ol> </li> <li>Finally, you will vote for your team Most Valuable Person.<ul> <li>Write down the full name of person on your team who you believe epitomizes the highest scores on the particular points of the spidergraph that you personally feel were most important to your team's success, morale, friendship, and who always made you feel like you were an important, integral part of the team.</li> </ul> </li> <li>What value did you gain from the team contract that you created in the previous assignment?<ul> <li>Did any situation occur in which your team found the answer in the processes defined by the team contract? Describe what happened.</li> <li>Were there any situations that could have benefitted from a more complete team contract? Describe them.</li> <li>Was the team contract ever detrimental to the effective functioning of your team?</li> <li>Did you ever have to update the contract during the course of the final project?</li> </ul> </li> <li>What are your main takeaways from this class?</li> <li>What should we keep next time we offer this class? What should we do differently?</li> </ul> <p>Individual Contributions (10 points)</p> <p>All team members should be making pull requests (PRs) when adding/pushing new code. As you progress toward your MVP, every individual team member should have a</p> <ul> <li>At least 1 PR merged with at least one +1 from a reviewer.</li> <li>At least 1 constructive comment on other team member\u2019s PR.</li> </ul> <p>We will visit your GitHub repo to check that these have occurred with timestamps before the assignment deadline of May 2nd and after the last deadline of April 18th. If GitHub fails to show any evidence of your work, you will lose points from the individual portion of your grade.</p> <p>Submit your Individual Post-Mortem and links to your 1 PR / 1 Comment on Gradescope.</p>"},{"location":"assignments/FP3/#bonus","title":"Bonus","text":"<p>Any team which fully completes its user stories on time will receive a 10% bonus for the final project portion of this class.</p> <ul> <li>8 percentage points will be divided evenly among the team members (e.g. if there are 4 people on the team, each person gets 2 percentage points. If the team has 5 people, each person gets 1.8 percentage points.)</li> <li>The team\u2019s most valuable person (MVP) will receive 2 percentage points.</li> <li>Your team may choose at most one person to be MVP. If no one is chosen, your team will forfeit those 2 percentage points.</li> </ul> <p>To help with the computation, note that the final project is worth 500 points (FP1 was 100 points, FP2 was 100 points, and this assignment is 300 points). The total 10% bonus is therefore worth 50 points. The team's most valuable person receives 10 points. The remaining 40 points will be distributed evenly among all team members (even the team's most valuable person).</p>"},{"location":"assignments/HW1/","title":"Homework 1: Discovery","text":"<p> 100 points  Due on Gradescope Monday, January 20, 2024 11:59pm  This homework is to be done individually. </p>"},{"location":"assignments/HW1/#submission","title":"Submission","text":"<p>Submit this assignment as a PDF file to Gradescope. If you prepare the response in some other software (like Tex), please export as PDF before submitting. Include your name and Andrew ID at the top of the document.</p>"},{"location":"assignments/HW1/#references","title":"References","text":"<p>The Mom Test by Rob Fitzpatrick.</p>"},{"location":"assignments/HW1/#learning-goals","title":"Learning Goals","text":"<p>Assignment objectives: - Think through the kind of product you\u2019d like to build. Your ideas are non-binding (and, moreover, you probably shouldn\u2019t get too attached to them)! You\u2019ll have several opportunities to pivot based on discovery or user feedback, and to collaborate with your classmates to refine your ideas. - Practice formulating unbiased discovery questions that yield useful data (as opposed to false positives). - Practice talking to real people about their pain points.</p>"},{"location":"assignments/HW1/#the-tasks","title":"The tasks","text":"<p>See the assignment PDF.</p>"},{"location":"assignments/HW1/#grading","title":"Grading","text":"<p>This homework is worth 100 points.</p>"},{"location":"assignments/HW2/","title":"Homework 2: Sprint 0","text":"<p> 50 points  Due on Gradescope Thursday, February 1, 2023 11:59pm  This homework is to be done and submitted as a team. </p>"},{"location":"assignments/HW2/#learning-goals","title":"Learning Goals","text":"<ul> <li>Identify the key user stories that will constitute the Minimum Viable Product (MVP).</li> <li>Justify which features to include based on priority, and time available</li> <li>Understand and practice the basic building blocks for how to create and deploy   a modern web app (related, in some fashion, to the MVC model)</li> </ul>"},{"location":"assignments/HW2/#references","title":"References","text":"<ul> <li>Sprint 0</li> <li>Startup Sprint</li> <li>GitHub Documentation</li> <li>GitHub Projects</li> <li>Dronuts Starter Kit</li> <li>Render docs</li> <li>Docker overview</li> </ul>"},{"location":"assignments/HW2/#homework-tasks","title":"Homework Tasks","text":""},{"location":"assignments/HW2/#create-project-backlog","title":"Create Project Backlog","text":"<ul> <li>Reconcile all individual user stories into a backlog of team user stories.   For this project, we require you to work within the GitHub ecosystem.</li> <li>Take advantage of the GitHub Projects kanban board.</li> <li>Each item on the board should be a separate GitHub Issue. All GitHub Issues     should be linked to a Pull Request and an assignee.</li> <li>Explore GitHub Documentation for a great guide     on these tools!</li> <li>You should have the following columns categories (you can rename any of them     as you see fit):<ul> <li>Backlog</li> <li>Sprint To-Dos</li> <li>In Progress</li> <li>Done</li> </ul> </li> <li>Estimate the amount of time your team will take to implement each user story,   and justify your estimation.</li> <li>Write a document listing the user stories your team will include in the MVP   and which your team will not. Add a SHORT justification for each user story decision.   NOTE: you cannot select more than 40 hours worth of work in a single week, per team.</li> </ul>"},{"location":"assignments/HW2/#backend-framework","title":"Backend Framework","text":"<ul> <li>Create a set of business objectives and criteria for deciding what type of   framework you should use.</li> <li>Unless you have a preference (let us know), you'll be using Express   to develop your Node.js web application.</li> <li>Write a business-style email justifying the use of this framework to your   investors and why Node.js is a good choice as a technology for building your web application.   Language is important here. Your investors are not software developers and   will not understand jargon and technobabble.</li> </ul>"},{"location":"assignments/HW2/#prepare-to-write-the-first-lines-of-productive-code","title":"Prepare to write the first line(s) of productive code.","text":"<ul> <li>Choose a name for your team.<ul> <li>You will be working on your team repository for this project. First,   collectively choose a team name.   Your team name should be unique, pronounceable, short, and something you   would be proud to shout in your team cheer on the streets of Pittsburgh in   the presence of small, impressionable, multi-lingual children.</li> </ul> </li> <li>Agree upon and configure development communication tools, e.g. Slack, etc...</li> <li>Agree upon and configure your project management infrastructure, including bug   tracking, task management, etc... We suggest that you use GitHub Issues.</li> <li>Create a repo for your team using GitHub classroom.   NOTE: only one student should make the assignment repo, then add the rest   of the team. DM us on Slack if you have issues.</li> <li>Write a simple hello-world app with a test (even if it\u2019s fake) and follow   the application instructions in README that will be cloned into your classroom   repo.</li> <li>Setup your team's development infrastructure, including development   environment, Continuous Integration (CI), code style (via linter), and   deployment pipeline, as per the README. We suggest you use GitHub Actions for   CI.</li> <li>Deploy your hello-world application for the world to see! We recommend   Render for this!</li> </ul> <p>Instructions for getting started can be found in the README.MD once you setup your classroom repo. This includes creating/joining a GitHub team, creating a repository, setting up GitHub Actions, Docker.</p>"},{"location":"assignments/HW2/#cloud-deployment","title":"Cloud Deployment","text":"<p>For deployment on a cloud server instance, the instructors suggest using Render which allows free deployment for small projects. You can see how to deploy Docker contains on Render here.</p> <p>The following links will help with setting up the service.</p> <ul> <li>How do I start with Node.js after I installed it?</li> <li>Dockerizing a Node.js web application</li> <li>Deploying on Render<ul> <li>You will not need a credit card on Render for free web services, but   always make sure you are using the <code>Free</code> options.</li> </ul> </li> </ul>"},{"location":"assignments/HW2/#do-something-fun-non-scholastic-with-your-team","title":"Do something fun (non-scholastic) with your team.","text":"<ul> <li>Getting to know your colleagues in a friendly context can often lead to more   effective collaboration; healthy teams often get lunch together, for example.   To incentivize this, we will give your team 5% extra credit for this assignment   if you meet as a team outside of a working session. You might want to eat   together or go out for boba tea. If someone on your team is not feeling well,   you may also do a virtual activity, such as an online gaming   session (perhaps drawasaurus) or social   \"zoom lunch.\"</li> </ul>"},{"location":"assignments/HW2/#deliverables","title":"Deliverables","text":"<p>You will submit this assignment via gradescope, Homework 2.</p> <p>Turn in one document that includes</p> <ul> <li>Your team's name.</li> <li>A link to your team\u2019s product backlog (i.e., your GitHub Projects board).</li> <li>A short justification for which user stories you are including in your MVP.</li> <li>Your business-style email justifying the use of your framework and using Node.js   to investors.</li> <li>A URL which is running your starter repository's hello-world application.</li> </ul> <p>To earn your extra credit, email post a picture of your team outing or screenshot of your virtual activity showing everyone who participated on Slack.</p>"},{"location":"assignments/HW2/#grading","title":"Grading","text":"<p>This homework is worth 50 points. To receive full credit, you must have a reasonable product backlog that includes estimates and a short (no more than a few sentences) justifications for the user stories you choose for your MVP. You should have a reasonable justification for which framework you choose, and you should be ready to write your first line of real, productive code in the next sprint.</p>"},{"location":"assignments/HW3/","title":"Homework 3: Sprint 1","text":"<p> 100 points  Due on Gradescope Thursday, February 15, 2023 11:59pm  This homework is to be done and submitted as a team. </p>"},{"location":"assignments/HW3/#learning-goals","title":"Learning Goals","text":"<ul> <li>Develop data models for representing data and relationships.</li> <li>Use an iterative design process to develop rapid user interface prototypes.</li> </ul>"},{"location":"assignments/HW3/#references","title":"References","text":"<ul> <li>Design Methods E-Book</li> <li>SQL vs. NoSQL: The Differences Explained + When to Use Each</li> </ul>"},{"location":"assignments/HW3/#homework-tasks","title":"Homework Tasks","text":"<p>In this homework, you will work to conduct your first sprint with your team towards your MVP. The core goal in this assignment is to prototype the core elements of your product. Your task is to prepare a number of different forms of prototypes.</p> <p>Please continue to use your current Dronuts repository that you generated as part of Sprint 0.</p>"},{"location":"assignments/HW3/#designing-your-data-model","title":"Designing your Data Model","text":"<p>An Object Data Model is a way of specifying the format of data your application will interact with. There are many different ways of developing such a model; ranging from building object-oriented class structures to to generating database schemas (like in SQL), or even as a formal UML diagram. Creating a a data model is crucial any time different components of an application are to interact. Examples include a database and server-side application or an MVC (Model, View, Controller) frontend and a server-side application.</p> <p>In this assignment, you will focus on defining a data model, represented in code with either an Object Document Mapper, ODM (for document-oriented NoSQL databases like MongoDB), or an Object Relational Mapper, ORM (for SQL databases like PostgresSQL). In pure Javascript, objects can be represented in a format called JSON.</p> <p>For instance, a <code>User</code> might be represented as follows:</p> <pre><code>{\n   \"username\" : \"ricksanchez\",\n   \"password\" : \"735ed12abec12bdcb42b\",\n   \"full_name\" : \"Rick Sanchez\",\n   \"followers\" : [\n      \"msmith\",\n      \"bperson\",\n      \"kmichael\",\n      \"mpbh\"\n   ]\n}\n</code></pre> <p>While this is a good example of a user, it is not entirely explanatory of the datatypes and relationships expressed in the data. Likewise, we might write out a document that looks something like this to help guide development:</p> <pre><code>{\n   \"username\" : String,    // UNIQUE, URL-SAFE\n   \"password\" : String,    // Salted, Hashed Password.\n   \"full_name\" : String,\n   \"twitter_id\" : ?String, // Optional, hence the question mark\n   \"followers\" : [String]  // Reference to other USER objects\n}\n</code></pre> <p>Much like developing in an object-oriented fashion within a single language, developing an object data model like this allows team members to coordinate development even across multiple projects (say, frontend and backend).  As such, your team should:</p> <ul> <li>As a group, decide on a list of relevant objects (Drones, Users, etc).</li> <li>For each of these objects, create an example object (like the first <code>User</code>   example above). Note that you may need to have multiple example objects if an   object can be in more than one state.</li> <li>For each of these objects, create a generalized, corresponding   data mapping (as shown above), mapping object fields to types, while   acknowleding if fields are optional, nullable, required, etc.   Comment as necessary to explain these constraints to us.</li> <li>Put all of the above examples and objects into your repository   Wiki.</li> </ul>"},{"location":"assignments/HW3/#database-choice","title":"Database Choice","text":"<p>Express.JS does not expose built-in functionality for defining data models. First, you'll need to choose a database. We recommend using either MongoDB as a document-oriented database or PostgresSQL as a relational one.</p> <p>Then, you'll need to use a corresponding library for mapping your Object Data Model to/from a relational database or a document-oriented one. We recommend either Mongoose (for MongoDB) or Sequelize (for PostgresSQL).</p>"},{"location":"assignments/HW3/#sequelize","title":"Sequelize","text":"<p>If you go this route, you will install Sequelize, a package for validating models and generating SQL queries for the PostgresSQL database (or any SQL variant).</p> <ul> <li>Install the Sequelize package dependency via npm/yarn.</li> <li>Define models, with datatypes, for all of the objects in your Object Data Model.   Follow this guide.</li> <li>Write some simple unit tests for your model validation.   Follow this guide.</li> <li>Note: Follow along with this tutorial   on setting up Sequelize to work with Typescript.</li> </ul>"},{"location":"assignments/HW3/#mongoose","title":"Mongoose","text":"<p>If you go this route, you will install Mongoose.js, a package for validating JSON objects for the MongoDB database:</p> <ul> <li>Install the Mongoose package dependency via npm/yarn.</li> <li>Create schema objects for all of the objects in your Object Data Model.   Follow this guide.</li> <li>Write some simple unit tests for your schema validation.   Follow this guide.</li> </ul>"},{"location":"assignments/HW3/#validation","title":"Validation","text":"<p>In an ideal world, all actors (developers on your project, users of your API, etc.) would respect your data model. However, this isn\u2019t always going to be the case; developers can make mistakes, API users can mis-use your API, and hackers can attempt to abuse your object model for nefarious purposes.</p> <p>To combat this, your application should programmatically validate objects, as defined by your data model. The way your team should implement this depends on your choice of database (MongDB vs PostgresSQL) and corresponding library: Mongoose (for MongoDB) or Sequelize (for PostgresSQL).</p> <p>For example, in Sequelize, a <code>User</code> model with constraints may be defined like this:</p> <pre><code>const { Sequelize, Op, Model, DataTypes } = require(\"sequelize\");\nconst sequelize = new Sequelize('postgres://user:pass@example.com:5432/dbname')\n\nconst User = sequelize.define(\"user\", {\n  username: {\n    type: DataTypes.TEXT,\n    allowNull: false,\n    unique: true\n  },\n  password: {\n    type: DataTypes.STRING(64),\n    validate: {\n      is: /^[0-9a-f]{64}$/i\n    }\n  }\n});\n\n(async () =&gt; {\n  await sequelize.sync({ force: true });\n  // Code here\n})();\n</code></pre> <p>where validations are automatically run on create, update and save. You can also call a <code>validate()</code> method to manually validate an instance.</p> <p>In Mongoose, upon defining your Schema object, you may get validation errors on save or by calling <code>validateSync</code>:</p> <pre><code>const schema = new Schema({\n  username: {\n    type: String,\n    required: true\n  }\n  phone: {\n    type: String,\n    validate: {\n      validator: function(v) {\n        return /\\d{3}-\\d{3}-\\d{4}/.test(v);\n      },\n      message: props =&gt; `${props.value} is not a valid phone number!`\n    },\n    required: [true, 'User phone number required']\n  }\n});\n\nconst User = db.model('user', schema);\nuser.phone = '201-555-0123';\n\n// This person has no username :(\nconst user = new User();\n\nlet error;\ntry {\n  await user.save();\n} catch (err) {\n  error = err;\n}\n\nassert.equal(error.errors['username'].message,\n  'Path `username` is required.');\n\nerror = user.validateSync();\nassert.equal(error.errors['username'].message,\n  'Path `name` is required.');\n</code></pre>"},{"location":"assignments/HW3/#paper-prototype","title":"Paper Prototype","text":"<p>To help you synthesize all your team\u2019s ideas into a single design, you will start by developing a series of paper prototypes. Each individual team member is responsible for generating a total of 6 different paper prototype sketches. Each person should create 3 sketches of the UI for the customer page, and 3 sketches of the UI for the employees. The UIs do not need to be \u201cgood\u201d, but they should be all different from each other. After generating these sketches individually, your team should meet to synthesize your design into a single design that incorporates the best of all the designs.</p> <p>To turn these in, each team member should scan or take a picture of their sketches, and then upload them to your GitHub Wiki. Your team should turn in a link to the Wiki page where your pictures live.</p>"},{"location":"assignments/HW3/#frontend-prototype","title":"Frontend Prototype","text":"<p>As a startup with limited funding, your company should be focused on building a presentable prototype as quickly as possible. However, as you don\u2019t want to do a lot of work from the ground up, you've decided to develop your prototype using a frontend user-interface \"framework\", a library which makes it very easy to create dynamic client-side applications. To keep things simple, we recommend that groups use React to build your frontend applications. If your team has another choice you are all more comfortable with (e.g. Vue, Angular, or Svelte), please let the TAs know ahead of time. We'll be focusing on React in recitations however.</p> <p>Your team can familiarize themselves with React using the following resources:</p> <ul> <li>Intro to React Tutorial</li> <li>React Tutorial</li> <li>React Fundamentals</li> </ul> <p>Using a frotend framework like React (which is MV*'ish, but not explicitly MVC), your team should develop a prototype:</p> <ul> <li> <p>Develop a view-only prototype for the 1-3 largest user stories in your   project. What you do not accomplish in this sprint, you will need to accomplish   later, so budget your time appropriately.  This should be a prototype, so   while it should demonstrate how a user will interact with the system, it does   not need to be \"pixel perfect.\" Because it is view only, you should be able to   navigate across pages, but you do not need to implement any part of the backend   (data processing, validation, generation) at this point.</p> </li> <li> <p>Your team will be deploying your application hosted on the cloud. Again,   we recommend Render for deployment. Please ensure   that your submission deploys correctly upon submission of your assignment.</p> </li> </ul>"},{"location":"assignments/HW3/#use-of-typescript","title":"Use of Typescript","text":"<p>In this class, we highly recommend the use of Typescript instead of Javascript for your Dronuts prototype. Typescript is a much stricter language that enforces types within your Javascript code. For this assignment, your frontend prototype and backend should be implemented using Typescript. You will be introduced to this in recitation, but here is a tutorial that discusses Typescript further.</p> <p>We expect your team to set up CI for your web apps. We recommend the use of Github Actions as your CI service, however, other options such as Circle CI are acceptable. Here are some links to get you started:</p> <ul> <li>Using Starter Workflows</li> <li>How to build a CI/CD pipeline with GitHub Actions in four simple steps</li> <li>Creating a CI/CD pipeline using Github Actions</li> </ul>"},{"location":"assignments/HW3/#releasing-your-work","title":"Releasing your work","text":"<p>Just before turning in your assignment, one person on your team should create a GitHub Release.</p>"},{"location":"assignments/HW3/#deliverables","title":"Deliverables","text":"<p>The deliverables for this assignment include:</p> <ol> <li>Providing a link to your team's Object Data Model, which should be documented    in the group's repository Wiki.</li> <li>Submitting a link to the paper prototype section of your team's repository.    Each team member must upload their paper prototypes to this section. Although    the prototypes can be on different pages, ensure all of them are accessible    from a single, unified page for easy navigation.</li> <li>In your Wiki, add an entry explaining why the group chose MongoDB (NoSQL) or    PostgresSQL (SQL) as your database of choice.</li> <li>Sharing a link to the GitHub webpage where your team's    deliverables are released (one per team). This release should contain:<ul> <li>Your team's Data Model implemented with either an Object Document Mapper   or a Relational Mapper in Express.js. Utilize Mongoose or Sequelize libraries   for this purpose, and do some initial model validation testing. Ensure   this code is committed to your team's repository and merged into a <code>main</code>   branch. Note: all work should be PR'ed first!</li> <li>A Typescript-based frontend prototype developed in React (or a   framework of your choosing), committed to your team's repository.   Note: Once again, if you choose a different frontend framework, please   discuss this with the TAs first!</li> </ul> </li> <li>All links should be submitted as a single document via    gradescope    (one per team).</li> </ol>"},{"location":"assignments/HW3/#additional-criteria","title":"Additional Criteria","text":"<p>We will be strictly enforcing and grading your team\u2019s process; i.e., we want to see all PRs, close issues, and issues tied to cards on your team's Github Project board with individuals assigned to each. Failure to adhere to these practices will result in point deductions.</p>"},{"location":"assignments/HW4/","title":"Homework 4: Sprint 2","text":"<p> 100 points  Due on Gradescope Thursday, February 29, 2023 11:59pm  This homework is to be done and submitted as a team.  A portion of this assignment will be graded for you individually and the other portion will be graded for your team as a whole. </p>"},{"location":"assignments/HW4/#learning-goals","title":"Learning Goals","text":"<p>In completing this assignment, you will develop the skills needed to:</p> <ul> <li>Use appropriate technology to build your MVP.</li> <li>Select and measure appropriate indicators that will help you evaluate viability.</li> <li>Present your software to stakeholders.</li> </ul>"},{"location":"assignments/HW4/#homework-tasks","title":"Homework Tasks","text":"<p>In this homework, you will conduct your second two-week sprint with your team to complete a presentable, Minimal Viable Product (MVP) for the Dronut Application.</p>"},{"location":"assignments/HW4/#mvp-deployment","title":"MVP Deployment","text":"<p>Your team should spend the majority of this sprint finishing your MVP and deploying it on Render.</p>"},{"location":"assignments/HW4/#checkpoint-meetings-feb-26-feb-27","title":"Checkpoint Meetings (Feb 26 - Feb 27)","text":"<p>During the week of Feb 26, we require that every team visit during a series of open sessions/hours so the TAs can take a look at your team's work. This is to make sure that all teams make constant steady progress towards their MVP.</p> <p>Sign up for your time slot on this Google Sheet.</p> <p>When you visit, please show the following:</p> <ol> <li>Prototyped frontend. Have some version of your frontend ready to show,    whether that be a simple static layout of your app\u2019s elements, or a fully    dynamic and interactive frontend application.</li> <li>Functional backend. Have a (near) complete set of backend endpoints to    demonstrate.</li> <li>List of remaining tasks. Please walk the TAs through what your team still    needs to complete for the MVP deliverable.</li> </ol> <p>It is not necessary for all team members to come to the check-in; however, having members for each component of the project (i.e., frontend, backend) present will help you explain your work to the TAs and receive better feedback.</p> <p>The objective of these meetings is not to assess or determine grades, but rather to help students ship a great MVP on time. As such, please visit us during these sessions and/or during Office Hours as soon as possible to make sure your team is on track!</p>"},{"location":"assignments/HW4/#demonstration-of-individual-actions","title":"Demonstration of Individual Actions","text":"<p>All team members should be making pull requests (PRs) when adding/pushing new code. As you progress toward your MVP, every individual team member should have a</p> <ul> <li>Pull Request merged with at least one +1 from a reviewer.</li> <li>Add at least one constructive comment on another team member\u2019s Pull Request.</li> </ul> <p>We will visit your GitHub repo to check that these have occurred with timestamps prior to the assignment deadline of Feb 28. If GitHub fails to show any evidence of your work, you will lose points from the individual portion of your grade.</p>"},{"location":"assignments/HW4/#final-team-deliverables","title":"Final Team Deliverables","text":"<ol> <li> <p>A short (approximately 1 page) writeup.</p> <ul> <li>Document all changes you have made since your initial plan (backlog)    regarding the Minimal feature set you\u2019ve implemented, with a brief    justification. If you made no changes, simply say so in one sentence.</li> <li>Document all of the ways your MVP allows you to assess or measure    Viability (e.g., via collecting of metrics).</li> </ul> </li> <li> <p>Video MVP Walkthrough - Your team should submit a video walkthrough of    your prototype:</p> <ul> <li>Each team member should present a single user story (e.g., selecting   donuts from the menu, completing a transaction, fulfilling an order,   marking it for delivery, etc).</li> <li>Your walkthrough should focus on explaining how the software is to be used   from a user-perspective. Take for example,   this video walkthrough of how to use Gmail,   or the Dropbox video we discussed in class.</li> <li>There are a lot of tools which you can use to prepare your demo video.   Choose the one you\u2019re most comfortable with. We recommend Loom,   a Chrome extension which allows you to easily record a screen grab along   with narration. Another good one is Quicktime Player if you work on a MacBook.</li> <li>Once you've created your video, upload it to YouTube and make a note of   the URL.</li> </ul> </li> </ol> <p>Submit both your writeup and URL to your walkthrough video to Gradescope.</p>"},{"location":"assignments/HW5/","title":"Homework 5: Sprint 3 (Final Dronuts Sprint)","text":"<p> 100 points  Due on Gradescope Wednesday, March 20, 2023 11:59pm  This homework is to be done and submitted as a team.  A portion of this assignment will be graded for you individually and the other portion will be graded for your team as a whole. </p>"},{"location":"assignments/HW5/#learning-goals","title":"Learning Goals","text":"<p>In this homework, you will conduct your third (and final) sprint with your team to complete a presentable Minimum Viable Product (MVP) for the Dronuts Application. In completing this assignment, you will develop the skills needed to:</p> <ul> <li>Use appropriate technology to build and finalize your MVP.</li> <li>Select and measure appropriate indicators that will help you evaluate   viability.</li> <li>Be ready to present your software to stakeholders.</li> </ul>"},{"location":"assignments/HW5/#homework-tasks","title":"Homework Tasks","text":"<p>In this sprint, you should improve your MVP along the following lines:</p> <ul> <li>You should ensure that your customer facing side and your store facing sides are communicating. (e.g., this means that a customer should be able to create an order that shows up for the store, and the store should be able to make some change that the client sees, like maybe adding a donut type, or changing a price).</li> <li>You should now be able to do some end-to-end testing. You are expected to have at least one end-to-end (integration) test for the customer facing side, and one end-to-end (integration) test for the store facing side.</li> <li>You should incorporate the DroneTech and CommerceFriend into your application to some varying degree (if you haven't already).</li> <li>Optionally, you may choose to implement a map to show where the drones are, and how they are moving to deliveries. If you choose to implement this, you will receive 10 extra credit points.</li> </ul> <p>Proper use of your Kanban board should be maintained and tasks should be assigned to team members.</p>"},{"location":"assignments/HW5/#demonstration-of-individual-actions","title":"Demonstration of Individual Actions","text":"<p>All team members should still be making pull requests (PRs) when adding/pushing new code. PRs should be used to close out their corresponding issues.</p> <p>As you progress toward your MVP, every individual team member should demonstrate</p> <ul> <li>At least one task on the Kanban board is assigned to them.</li> <li>A pull request merged with at least one +1 from a reviewer.</li> <li>Adding at least one constructive comment on another team member\u2019s Pull Request.</li> </ul> <p>We will visit your GitHub repo to check that these have occurred with timestamps prior to the assignment deadline of March 20th. If GitHub fails to show any evidence of your work, you will lose points from the individual portion of your grade.</p>"},{"location":"assignments/HW5/#final-team-deliverables-85-points","title":"Final Team Deliverables (85 points)","text":"<ul> <li>Release version 1.0 of your code.</li> </ul> <p>You have the option of choosing your delivery date for this homework.  To let us know your choice, you should tag a release version of your code in your Github repo.  The timestamp of the release that you create will be your delivery date from the perspective of the staff. Regardless, please tag a version as 1.0 before 11:59pm March 20th, with or without the optional drone map.</p> <p>Submit the URL to your release to Gradescope.</p>"},{"location":"assignments/HW5/#individual-deliverable-15-points","title":"Individual Deliverable (15 points)","text":"<p>As this is your final sprint for the Dronuts application, you should write a 1-2 page reflection on your experiences. Some of the points that you should reflect upon include the following:</p> <ul> <li>The project, itself:<ul> <li>How did your project turn out?</li> <li>Did your team complete everything you expected? Why or why not?</li> <li>Are you satisfied with its functionality? Why?</li> <li>Are you satisfied with its quality? Why?</li> </ul> </li> <li>Your individual performance:<ul> <li>What new skills did you learn?</li> <li>What do you wish you had done differently?</li> <li>What would you have done the same?</li> </ul> </li> <li>Your team's performance:<ul> <li>What went well?</li> <li>What went poorly?</li> <li>What will you do differently with your next team?</li> </ul> </li> </ul> <p>Additionally, you are required to summarize your contributions to the Dronuts project, and your perception of the contributions of your teammates.</p> <p>Upload this document individually to Gradescope.</p>"},{"location":"assignments/hw3-25/","title":"Homework 3: GitHub Basics","text":""},{"location":"assignments/hw3-25/#learning-goals","title":"Learning goals","text":"<ul> <li>Get comfortable with GitHub if you aren't already</li> <li>Think about secure development practices</li> <li>Practice simple code review</li> </ul>"},{"location":"assignments/hw3-25/#project-context","title":"Project context","text":"<p>You and your team have access to a basic calculator app through GitHub classroom. Over the next three assignments, you'll (1) set up the repo and merge a few simple PRs (2) deploy the application and set up automated deployments and (3) write tests and create a continuous integration (CI) pipeline. You should apply the development processes you learn here to your prototype product.</p>"},{"location":"assignments/hw3-25/#assignment-instructions","title":"Assignment instructions","text":"<p>In this assignment, you'll set up your local development environment, securely configure your repo, make a PR, and review your teammates' PRs.</p> <p>You'll notice that a number of these steps address security operations. Why bother with a secure setup? Well, if you actually build a successful company, you (and your software!) become a target. If an attacker can gain write access to your source code, for example, they can insert backdoors that let them hold services ransom, steal user data, or even steal money. This opens you up to a world of legal and financial pain---but luckily, there are really simple things you can do that significantly raise the barrier for attackers. This assignment touches on several of them. </p>"},{"location":"assignments/hw3-25/#1-configure-github-with-non-sms-2fa","title":"1. Configure GitHub with (non-SMS) 2FA","text":"<p>Having a 2FA method makes it vastly harder for attackers to compromise your GitHub account and impersonate you.</p> <p>Follow these instructions to set up two-factor authentication for your GitHub account. This 2FA method must not be text message/SMS. We reccomend FIDO if possible, and TOTP as a backup option.</p>"},{"location":"assignments/hw3-25/#turn-in-instructions","title":"Turn in instructions","text":"<p>When you have done so, navigate to your GitHub profile; under Settings and Authentication, take a screenshot of the Preferred 2FA Method box that includes both the 2FA method and your username. Do not include anything else in the screenshot (this is possible due to the layout of the page).</p>"},{"location":"assignments/hw3-25/#2-configure-github-with-ssh","title":"2. Configure GitHub with SSH","text":"<p>Using SSH for GitHub authentication is both more secure and more convenient than using password authentication.</p> <p>Follow these instructions to set up a new SSH key with GitHub if you haven't already. Specifically, you will:</p> <ol> <li>Generate a new SSH key. Make sure to use a passphrase.</li> <li>Add the SSH key to your account.</li> <li>Test that everything worked.</li> </ol>"},{"location":"assignments/hw3-25/#turn-in-instructions_1","title":"Turn in instructions","text":"<p>Once you've done these things, navigate to the SSH and GPG page in your account settings, and take a screenshot that encompasses the name/hash identifier of the key of your SSH key and your username.</p>"},{"location":"assignments/hw3-25/#2b-for-10-point-bonus-configure-commit-signing","title":"2b for 10 point bonus: Configure commit signing","text":"<p>To get ten bonus points, configure commit signing. Then, write and submit a couple sentences about why it's beneficial.</p>"},{"location":"assignments/hw3-25/#turn-in-instructions_2","title":"Turn in instructions","text":"<p>Submit a screenshot of your signed commits and your description.</p>"},{"location":"assignments/hw3-25/#3-create-your-github-classroom-team","title":"3. Create your GitHub classroom team.","text":"<p>One person on your team should go to this GitHub Classroom link to create your team. Be sure to select all of your team's members. Check to see if your team name already exists in the Software Engineering for Startups organization before creating a new one.</p> <p>This will create a shared repository for all members of your team. All of the instructors will have admin access to your new repository.</p> <p>There is no deliverable for this step.</p>"},{"location":"assignments/hw3-25/#4-clone-the-calculator-repo-onto-your-local-machine","title":"4. Clone the calculator repo onto your local machine","text":"<p>When you navigate to the Code tab, make sure you use the SSH tab, not the HTTPS tab. This will clone the repo using the SSH authentication flow.</p> <p>There is no deliverable for this step.</p>"},{"location":"assignments/hw3-25/#5-configure-branch-protection","title":"5. Configure branch protection","text":"<p>As it stands, anyone with access to your repo can push whatever garbage they want to the main branch. That's not good! It's important to make sure code that actually gets deployed has been thoroughly tested and reviewed (to catch everything from mistakes to intentional back doors!). In this assignment, you'll focus on code review; in a future assignment, you'll block merges to main until your code passes CI.</p> <p>To protect your main branch, navigate to the Settings tab in the calculator repo and click on Branches (on the lefthand side). You'll see two options: (1) Add branch ruleset and (2) Add classic branch protection rule. For now, you're just going to add a classic branch protection rule that protects main from direct, unreviewed commits: check the box to require a pull request before merging. Once you check this box, you will have the ability to require multiple PR approvals before merging is allowed. Require at least two.</p>"},{"location":"assignments/hw3-25/#turn-in-instructions_3","title":"Turn in instructions","text":"<p>Take a screenshot of your branch protection rules; we'll also check the repository directly. </p>"},{"location":"assignments/hw3-25/#6-configure-pull-requests","title":"6. Configure pull requests","text":"<p>Your main history is much easier to track if all commits to main are uniform. Different teams have different preferences for this configuration, but in this class, we'll require squash merging for a clean history; this is a very common configuration.</p> <p>Navigate to the General settings. Under Pull requests, uncheck merge commits and rebase merging, leaving only squash merging checked. In the dropdown, select Pull request title and description. This means that only the PR title and description will show up in your main branch's commit history, and each feature branch will be squashed into a single commit. </p>"},{"location":"assignments/hw3-25/#turn-in-instructions_4","title":"Turn in instructions","text":"<p>Take a screenshot of your repo's PR settings.</p>"},{"location":"assignments/hw3-25/#7-run-the-calculator-app-locally","title":"7. Run the calculator app locally","text":"<p>Follow the instructions in the README to set up and run the calculator on your machine. You can choose to deploy the app locally using either Docker or npm, depending on your preference. Ensure everything is working before proceeding with any modifications.</p> <p>There is no deliverable for this step.</p>"},{"location":"assignments/hw3-25/#8-add-a-piece-of-functionality-to-the-calculator","title":"8. Add a piece of functionality to the calculator","text":"<p>You will add a new piece of calculator functionality in a new branch. Then, you will open a pull request (PR) so that your teammates can review and approve your changes. </p> <p>Each team member should choose one of the following features. Coordinate with your teammates to ensure no two members implement the same functionality.</p> <ol> <li>Backward Button: Add a button that allows users to remove the last entered character in the calculator input field.</li> <li>Custom Pop-up for Invalid Expressions: Display a pop-up window when the user enters an invalid expression.</li> <li>Brackets Support: Add \"(\" and \")\" buttons and ensure expressions with brackets are correctly handled.</li> <li>Expression History Display: Show a list of previously calculated expressions in the frontend. The list should reset when the browser is refreshed.</li> <li>Backend Logging: Log all expressions sent to the backend into a local file. The log should persist even after the browser is refreshed.</li> </ol> <p>Use your PR message to clearly describe the changes you've made to the calculator app.</p>"},{"location":"assignments/hw3-25/#turn-in-instructions_5","title":"Turn in instructions","text":"<p>Please provide us a link to your PR.</p>"},{"location":"assignments/hw3-25/#9-review-at-least-two-prs","title":"9. Review at least two PRs","text":"<p>Following the best practices we discussed in class, leave two reviews on your teammates' PRs. If there issues, continue to discuss in the comments until you're satisfied with the changes and able to approve the pull requests.</p>"},{"location":"assignments/hw3-25/#turn-in-instructions_6","title":"Turn in instructions","text":"<p>Please provide two or more links to your reviews. </p>"},{"location":"assignments/hw3-25/#10-merge-your-reviewed-pr","title":"10. Merge your reviewed PR","text":"<p>Finally, once your PR has been approved, merge it.</p>"},{"location":"assignments/hw3-25/#turn-in-instructions_7","title":"Turn in instructions","text":"<p>Please provide a link to your merged commit. </p>"},{"location":"assignments/hw4-25/","title":"Homework 4: Software Testing","text":""},{"location":"assignments/hw4-25/#learning-goals","title":"Learning goals","text":"<ul> <li>Get comfortable with unit testing frameworks</li> <li>Learn how to create continuous integration workflows</li> <li>Create test infrastructure and code for the calculator project</li> </ul>"},{"location":"assignments/hw4-25/#project-context","title":"Project context","text":"<p>You and your team have access to a basic calculator app through GitHub Classroom. Last week, you learned how to set up the repository and merge in some pull requests (PRs). This week, you will learn to write test cases and create a continuous integration (CI) pipeline. You should apply the development processes you learn here to your prototype product.</p>"},{"location":"assignments/hw4-25/#assignment-instructions","title":"Assignment instructions","text":"<p>In this assignment, you'll go to your local development environment for the calculator app, install the testing framework, create some test cases, run them, and then set up a CI workflow to run these every time new code is checked into your repository. </p>"},{"location":"assignments/hw4-25/#unit-testing","title":"Unit testing","text":"<p>Unit testing is the lowest level manner of testing your software. In unit testing, we write test cases to exercise every individual function in our software. Each unit test exercises just one program path in (usually) just one function. It takes a lot of unit tests to cover all the code paths and ensure that your functions work as intended. </p> <p>We can use a unit testing framework to make it easier to run these test cases and automatically tally the results. </p>"},{"location":"assignments/hw4-25/#1-configure-jest","title":"1. Configure Jest","text":"<p>We will be using the Jest unit testing framework for Javascript applications running in Node.js and in the browser. </p> <p>Follow these instructions to install the Jest framework in your calculator front end and backend applications. We have already created a test directory in calculator-backend to store your new test cases. The tests in the frontend code are in the src/ subdirectory of calculator-frontend. </p> <p>Let's fix one configuration error in the calculator code; this is necessary because of a bug in Jest/Axios interactions. </p> <p>Edit calculator-frontend/package.json. Change the line starting with \"test\" inside of the \"scripts\" object to read:</p> <pre><code>\"test\": \"react-scripts test --transformIgnorePatterns 'node_modules/(?!(axios)/)' --detectOpenHandles\",\n</code></pre>"},{"location":"assignments/hw4-25/#turn-in-instructions","title":"Turn in instructions","text":"<p>There is no deliverable for this step.</p>"},{"location":"assignments/hw4-25/#2-run-our-test-cases","title":"2. Run our test cases","text":"<p>Jest runs all files whose names end in .test.js.  In calculator-backend/tests, there's a file called calculate.test.js. The code currently in there tests the calculate function by evaluating 2+3 and making sure the function returns 5. </p> <p>Run the test by executing:</p> <pre><code>cd calculator-backend\nnpm test\n</code></pre> <p>It should execute the test and show that it passed. </p>"},{"location":"assignments/hw4-25/#turn-in-instructions_1","title":"Turn in instructions","text":"<p>There is no deliverable for this step.</p>"},{"location":"assignments/hw4-25/#3-write-your-first-test-cases","title":"3. Write your first test cases","text":"<p>Let's add some test cases to calculator-backend.</p> <ol> <li>Add test cases for the '-', '*', and '/' operators that look like the test case for '+'. </li> <li>For division, test what happens if someone tries to divide by 0.</li> <li>Run these test cases by running 'npm test'. Do the test cases pass? </li> </ol>"},{"location":"assignments/hw4-25/#turn-in-instructions_2","title":"Turn in instructions","text":"<p>Take a screenshot that shows your new test cases passing and put this in the PDF you turn in.</p>"},{"location":"assignments/hw4-25/#3-write-a-test-case-for-the-front-end","title":"3. Write a test case for the front end","text":"<p>You'll need to install more npm modules to test the front end.</p> <p>Execute these three commands:</p> <pre><code>npm install @testing-library/react\nnpm install @testing-library/jest-dom\n</code></pre> <p>There's already an App.test.js in the src/ directory. It has the test code for App.js. </p> <p>Let's run that using <code>npm test</code>. </p> <p>This looks like a bad test. If you open up App.test.js it creates the Calculator app React element and then looks for a box on the screen labeled 'learn react'. </p> <p>That's not right! Our calculator is called 'Calculator App'. Change the test case to look for the text 'Calculator App' instead of 'learn react'. That's better! Be sure to update the test text 'renders calculator app react element' so the person running the test cases knows what the test does.</p> <p>If something went wrong in the test code, you can fix it, save the file, and 'npm test' will reexecute all the test cases without having to start it over again.</p>"},{"location":"assignments/hw4-25/#turn-in-instructions_3","title":"Turn in instructions","text":"<p>Take a screenshot that shows your modified test case passing and put this in the PDF you turn in.</p>"},{"location":"assignments/hw4-25/#4-write-more-test-cases-for-the-front-end","title":"4. Write more test cases for the front end","text":"<p>We want to test the calculator display to see if pressing the number buttons properly shows the numbers. </p> <p>First, we need to add an HTML attribute to the appropriate div so we can refer to it in our test cases. </p> <p>In Calculator.js, add the attribute 'data-testid=\"total\"' to the div with the className 'expression'. It should look like this:</p> <pre><code>&lt;div className=\"expression\" data-testid =\"total\"&gt;{expression || \"0\"}&lt;/div&gt;\n</code></pre> <p>Second, in the calculator-frontend/src directory, add a new file called Calculate.tests.js. Put this code in your file:</p> <pre><code>import { render, fireEvent, screen } from '@testing-library/react'\nimport '@testing-library/jest-dom'\nimport Calculator from './Calculator'\n\nit('Appends the number when pressed', async () =&gt; {\n   render(&lt;Calculator/&gt;);\n\n   // press a 1 on the calculator\n   var button1 = screen.getByText('1')\n   fireEvent.click(button1)\n   await button1\n\n   // get the expression DOM node and check that it is 1\n   const element = screen.getByTestId('total')\n   expect(element).toHaveTextContent('1');\n\n   // press a 2 on the calculator\n   var button2 = screen.getByText('2')\n   fireEvent.click(button2)\n   await button2\n\n   // get the expression DOM node and check that it is 12\n   expect(element).toHaveTextContent('12');\n});\n</code></pre> <p>It checks that if you press a '1', you see a 1 in the top of the calculator. If you then press a '2', you should see a 12 at the top of the calculator.</p> <p>Does it work? </p> <p>Let's add some test cases to calculator-frontend.</p> <ol> <li>Add a test case for the 'C' button. It should clear the calculator display back to 0. </li> <li>Add a test case for the '=' button. It should read the expression in the display, calculate the right answer, and check that the backend returned that answer to be displayed. </li> <li>Run these test cases by running 'npm test'. Do the test cases pass? </li> </ol>"},{"location":"assignments/hw4-25/#turn-in-instructions_4","title":"Turn in instructions","text":"<p>Take a screenshot that shows your new test cases passing and put this in the PDF you turn in.</p>"},{"location":"assignments/hw4-25/#5-test-your-new-calculator-functionality","title":"5. Test your new calculator functionality","text":"<p>Each team member should choose a feature added to the calculator in HW3 that they did not write. Coordinate with your teammates to ensure that no two members test the same feature.</p> <ol> <li>Create up to 5 new test cases for the selected feature. Some will be testable with just 1, but others may require more tests to cover all of the possible functionality.</li> </ol>"},{"location":"assignments/hw4-25/#turn-in-instructions_5","title":"Turn in instructions","text":"<p>Take a screenshot that shows your new test cases passing and put this in your PDF.</p>"},{"location":"assignments/hw4-25/#6-check-in-your-test-code","title":"6. Check in your test code.","text":"<p>Create a PR to commit your test code to the team's repository. Use your PR message to clearly describe the tests you've written.</p>"},{"location":"assignments/hw4-25/#turn-in-instructions_6","title":"Turn in instructions","text":"<p>Please provide us a link to your PR.</p>"},{"location":"assignments/hw4-25/#7-review-at-least-two-prs","title":"7. Review at least two PRs","text":"<p>Following the best practices we discussed in class, leave two reviews on your teammates' PRs. If there issues, continue to discuss in the comments until you're satisfied with the changes and able to approve the pull requests.</p>"},{"location":"assignments/hw4-25/#turn-in-instructions_7","title":"Turn in instructions","text":"<p>Please provide two or more links to your reviews. </p>"},{"location":"assignments/hw4-25/#10-merge-your-reviewed-pr","title":"10. Merge your reviewed PR","text":"<p>Finally, once your PR has been approved, merge it.</p>"},{"location":"assignments/hw4-25/#turn-in-instructions_8","title":"Turn in instructions","text":"<p>Please provide a link to your merged commit. </p>"},{"location":"assignments/hw4-25/#8-create-a-continuous-integration-pipeline-to-run-your-test-cases","title":"8. Create a continuous integration pipeline to run your test cases","text":"<p>This is a group exercise. Only one person should PR the workflow file, and others should review.</p> <p>To ensure the quality of our codebase, we want to make sure that your code passes all its test cases after every checkin. If the tests fail, we should reject the checkin.</p> <p>To setup our CI workflow, first, create a workflows subdirectory in .github. Then create a new file called ci.yml in workflows/.</p> <p>Open ci.yml in a text editor, paste in the following code snippet, and commit this to your repository. Use hygienic code practices and commit to a branch first, then issue a pull request, do a code review, and merge it into main.</p> <pre><code>name: ci\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches: [main]\n\npermissions:\n  contents: write\n\njobs:\n  jest:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: Run Frontend Tests\n        working-directory: ./calculator-frontend\n        run: |\n          npm install\n          npm test\n      - name: Run Backend Tests\n        working-directory: ./calculator-backend\n        run: |\n          npm install\n          npm test\n</code></pre> <p>Once this is installed, every time we push to main or do a pull request to main, this will execute the frontend and backend test code. We have Require status checks to pass before merging turned on in our repository settings. If any tests fail, the push or pull request will fail as well. </p> <p>You can find out what happened in the tests by clicking on the Actions tab at the top of your GitHub repository page and choose the 'ci' workflow. If the tests worked, you'll see all green dots. If it's running right now, the dot will be yellow and show a spinning circle. If there was a failure, the dot will be red. Click on a dot to see a terminal window that shows the commands as they executed as well as their results. </p>"},{"location":"assignments/hw4-25/#turn-in-instructions_9","title":"Turn in instructions","text":"<p>Turn in the URL to your workflow run of ci.yml that resulted in a successful test case run. If you had to run the ci workflow several times before it passed, turn in the URL of the latest workflow run that succeeded. </p>"},{"location":"assignments/hw5-25/","title":"Homework 5: DevOps and Documentation","text":""},{"location":"assignments/hw5-25/#learning-goals","title":"Learning goals","text":"<ul> <li>Become familiar with cloud deployments and CD</li> <li>Practice reading documentation and looking for answers independently</li> </ul>"},{"location":"assignments/hw5-25/#project-context","title":"Project context","text":"<p>You and your team have modified and tested a basic calculator app. Now, you're going to deploy that app so that anyone can access it.</p> <p>This is a group project. You will work in groups to understand AWS and Github documentation, and use your understanding to set up a deployment workflow that deploys the calculator app on every push to main. This assignment is intentionally less prescriptive than prior assignments; a large component of the work is reading and understanding documentation.</p>"},{"location":"assignments/hw5-25/#assignment-instructions","title":"Assignment instructions","text":"<p>In this assignment, you will use AWS to deploy your webapp. Specifically, you'll use:</p> <ul> <li>AWS lambda to run your backend code.</li> <li>API Gateway to expose your calculator API to the web.</li> <li>S3/Amplify to host your frontend code.</li> <li>Github actions to automatically deploy updated frontend/backend code to S3/lambda.</li> </ul> <p>We'll describe each of these components in more detail next.</p>"},{"location":"assignments/hw5-25/#deliverables","title":"Deliverables","text":"<p>For this assignment, each group will turn in:</p> <ul> <li>One paragraph on your division of responsibilities (see immediately next).</li> <li>A link to the production deployment of your calculator app.</li> <li>A link/links to your Github deployment workflows.</li> <li>A link to the most recent commit to main, showing that your deployment workflow has run successfully.</li> </ul>"},{"location":"assignments/hw5-25/#division-of-responsibilities","title":"Division of responsibilities","text":"<p>Read through the entire assignment. Despite the fact that there are four key parts, you'll notice that the parts are inter-dependent (e.g., the lambda code is invoked by calls to the API). Decide which teammate will be primarily responsible for which tasks, spelling out who will collaborate for inter-dependent pieces of the assignment.</p>"},{"location":"assignments/hw5-25/#logging-into-aws","title":"Logging into AWS","text":"<p>Use this link to log into your team's AWS account. You'll need AWS access for all steps of this homework.</p>"},{"location":"assignments/hw5-25/#1-use-aws-lambda-to-run-your-backend-code","title":"1. Use AWS lambda to run your backend code","text":"<p>AWS lambda lets you run \"server\" code without having to deal with actual servers; it's a \"serverless\" computing service. To use lambda, you:</p> <ul> <li>Write (slightly stylized) code that executes functions on certain events (e.g., the invocation of a given endpoint)</li> <li>Package the code up (e.g., literally zip it)</li> <li>Upload the packaged code to AWS</li> </ul> <p>You're going to modify your backend code so that it executes as a lambda function. Eventually, that lambda function will execute when the REST API's <code>calculate</code> endpoint receives a post request. To start with, though, you should become familiar with lambda, then package up your lambda code, deploy it, and make sure you can invoke it using the AWS CLI.</p>"},{"location":"assignments/hw5-25/#1-use-the-aws-console-to-experiment-with-lambda","title":"1. Use the AWS console to experiment with lambda","text":"<p>Use the AWS documentation to become familiar with building a dummy lambda function in the AWS console and invoking it. This won't do for your app, though: you ultimately want to package up your backend code and automatically deploy it using lambda.</p>"},{"location":"assignments/hw5-25/#2-package-and-invoke-your-lambda-code-using-the-aws-cli","title":"2. Package and invoke your lambda code using the AWS CLI","text":"<p>Next, learn to package up your JavaScript code and (1) upload it and (2) invoke it using the AWS CLI. The lambda portion of this lambda and API Gateway tutorial is a great resource.</p>"},{"location":"assignments/hw5-25/#3-integrate-your-lambda-code-with-cd-and-the-rest-api","title":"3. Integrate your lambda code with CD and the REST API","text":"<p>Finally, coordinate with your team to:</p> <ul> <li>Upload the lambda code automatically using a Github action and</li> <li>Modify the lambda code so that it's invoked by requests to your API's <code>calculate</code> function.</li> </ul>"},{"location":"assignments/hw5-25/#2-use-api-gateway-to-create-a-rest-api","title":"2. Use API Gateway to create a REST API","text":"<p>API Gateway makes it simple to spin up an API. A web API exposes endpoints that users (or applications) can interact with. You are going to create a REST API for your calculator app. This API will expose the <code>calculate</code> function.</p> <p>Start from this tutorial or the AWS docs above to create a REST API that exposes <code>calculate</code>.</p> <p>After setting up API Gateway, locate the API call logic in your frontend code (where it currently calls localhost). Replace the localhost URL with the API Gateway endpoint URL---though you likely want to preserve a version of the app that runs locally for testing.</p> <p>Then, coordinate with your team to make sure that invocations of <code>calculate</code> call the calculator's backend lambda code.</p>"},{"location":"assignments/hw5-25/#3-use-s3-and-amplify-to-host-your-frontend-code","title":"3. Use S3 and Amplify to host your frontend code","text":"<p>S3 is cloud storage for basically anything. You'll be using it to store the files that govern the frontend logic of your code. To deploy and expose these files at a publicly available URL endpoint, you will have to integrate with Amplify as well. AWS Amplify makes it easy to e.g., deploy app frontends and integrate with version control. In this assignment, you will use Amplify to manage deployment of the frontend of your calculator application.</p> <p>Amplify integrates with Amazon S3 to store and serve static assets like HTML, CSS, and JavaScript files. It provides an automated deployment pipeline that syncs with your GitHub repository and updates the frontend whenever changes are, for example, pushed to your main branch.</p> <p>Your task is to:</p> <ul> <li>Create an S3 bucket for storing frontend logic.</li> <li>Upload your frontend code's to the AWS S3 bucket.</li> <li>Set up Amplify to host the application frontend.</li> </ul> <p>To complete this part of the assignment, refer to the AWS documentation.</p>"},{"location":"assignments/hw5-25/#4-use-github-actions-to-automatically-deploy-on-each-push-to-main","title":"4. Use Github actions to automatically deploy on each push to main","text":"<p>After getting hands on experience with each service, you will use a Github action to deploy updates automatically on each commit to your main branch.</p> <p>The CD pipeline will perform the following tasks:</p> <ul> <li>Deploy the packaged backend Lambda code.</li> <li>Deploy the frontend code with the updated API endpoints to S3.</li> <li>Trigger AWS Amplify to redeploy the frontend from S3.</li> </ul> <p>In order to do this, you will need to allow Github to authenticate to AWS. Follow the Github documentation to safely use your AWS secrets in CD. This AWS blog post describes some (basic) best practices for generating and handling AWS authentication secrets in CI; navigate to the \"Configuring AWS credentials in GitHub\" section of the tutorial.</p> <p>Next, you will create one or more .yml files under the .github/workflows/ directory in your repository. These may be, for example, <code>.github/workflows/deploy-aws-s3.yml</code> (for AWS S3 deployment) or  <code>.github/workflows/deploy-aws-lambda.yml</code> (for AWS lambda deployment).</p> <p>You can use the following sample Github workflow for reference: <pre><code>name: \n\n# Specify when this workflow should be triggered\non:\n  push:\n    branches:\n\n\njobs:\n  deploy:\n    # Specify the environment for this job (e.g., ubuntu-latest)\n    runs-on: \n\n    steps:\n      - name: # Short title describing what this step does (e.g., \"Checkout Repository\", \"Build Frontend\")\n        run: # The command to execute (e.g., \"npm install\", \"aws s3 sync\")\n        uses: # GitHub Action to use (e.g., \"actions/checkout@v3\", \"aws-actions/configure-aws-credentials@v3\")\n        env: # Environment variables for this step (e.g., AWS keys, API URLs)\n\n      - name:\n        ...\n</code></pre></p>"},{"location":"assignments/hw5-25/#deploying-backend-code","title":"Deploying backend code","text":"<p>You should create a Github workflow that takes the follow steps:</p> <ul> <li>Checks out the code, sets up Node, and installs dependencies.</li> <li>Packages the code for lambda deployment.</li> <li>Uses the AWS CLI to update the lambda code (giving the CLI access to your authentication secret and AWS region through the environment).</li> </ul>"},{"location":"assignments/hw5-25/#deploying-frontend-code","title":"Deploying frontend code","text":"<p>You should create a Github workflow that takes the following steps:</p> <ul> <li>Checks out the code, sets up Node, and builds the code.</li> <li>Deploys the built application to an AWS S3 bucket.</li> <li>Triggers AWS Amplify to redeploy the latest frontend version from S3. See the AWS documentation for more. </li> </ul>"},{"location":"project/","title":"Class Projects (TBD)","text":""},{"location":"project/brand/","title":"Design Assets","text":"<p>Early in the development process, you realize that your capabilities with computer software does not extend to Adobe Illustrator.  Likewise, you decide to hire a famous design firm to create your logo and other design resources:</p>"},{"location":"project/brand/#color-scheme","title":"Color Scheme","text":""},{"location":"project/brand/#logo","title":"Logo","text":"Logo (Illustrator)             Logo (PNG)             Favicons (ICO)"},{"location":"project/brand/#example-donut-menu","title":"Example Donut Menu","text":"Apple Krumb   Bavarian Kreme   Blueberry   Boston Kreme   Chocolate Frosted   Chocolate Glaze   Chocolate Kreme   Cinnamon Sugar   Coconut   Cruller   Jelly   Marble Frosted   Old Fashioned   Original Glaze   Powdered Sugar   Sour Cream   Strawberry Frosted   Vanilla Frosted"},{"location":"project/credit_api/","title":"CommerceFriend API","text":"<p>As a small startup, you don't have the time or resources to devote to securing your payment API, so instead you opt to use an existing payment platform, CommerceFriend. This is not a friendly platform, but it's all you've got.</p> <p>hint: using the explorer can help you get to know the API.</p> <p>The process of using CommerceFriend flows like this (for ease of administration, authentication is disabled):</p> <ol> <li>Create a <code>company</code> for your app. This is essentially like your company's bank account. It s a <code>PUT</code> and can be overriden.</li> <li>When a user needs to pay for an order, your app should create a new transaction, listing the amount to be paid.</li> <li>You should then redirect the user to <code>https://credits-api.onrender.com/?transaction_id=&lt;id&gt;</code> where <code>&lt;id&gt;</code> is the transaction id.</li> <li>The user will then be prompted to provide their credit card information, and the transaction will be updated based on the status of the payment.</li> </ol> <p>The API itself is accessible at <code>https://credits-api.onrender.com/</code>.</p> <p>Here's a video walkthrough explaining the API:</p> <p>The status of both the CommerceFriend and DroneTech API servers can be found on this status page.</p>"},{"location":"project/deployment/","title":"Deployment","text":"<p>Since we used Docker for containerization, it is very easy to deploy our application in a variety of different ways.</p>"},{"location":"project/deployment/#render","title":"Render","text":"<p>For this year, the instructors suggest using Render for cloud deployment, which allows free deployment for small projects. You can see how to deploy Docker contains on Render here.</p>"},{"location":"project/docker/","title":"Docker","text":""},{"location":"project/docker/#introduction","title":"Introduction","text":"<p>Docker is a technology for packaging applications for easy deployment.</p>"},{"location":"project/docker/#dockerizing-your-application","title":"Dockerizing your Application","text":"<p>You should create a Docker file, which encapsulates your application. You can read more about Dockerizing a NodeJS application in the NodeJS Documentation.</p>"},{"location":"project/docker/#docker-compose","title":"Docker Compose","text":"<p>Docker Compose is a tool for defining and running multi-container Docker applications. With Docker Compose, you use a YAML file to configure your application\u2019s services. Then, with a single command, you create and start all the services from your configuration.</p>"},{"location":"project/drone_api/","title":"DroneTech API","text":"<p>The DroneTech API allows you to control a fleet of drones and send them to locations. This is not a friendly platform, but that's life.</p> <ol> <li>Your company has ownership of a fleet of drones controlled by   the DroneTech API, called an <code>airbase</code>.  You can get the status of this   airbase using the <code>/airbase/{company_name}</code> endpoint, which   will list all of the drones available to you.</li> </ol> <p>Any company name will return drone data. For example, if you <code>curl</code> or <code>GET</code> <code>https://drone-api-jgxf.onrender.com/api/airbases/thedronecompany</code>, it will   return:</p> <pre><code>{\n  \"id\": \"thedronecompany\",\n  \"location\": {\n    \"lat\": 40.44394444,\n    \"lng\": -79.94444444\n  },\n  \"drones\": [\n     29,\n     30,\n     31,\n     32\n  ]\n}\n</code></pre> <p>Make sure you run this API call first.</p> <ol> <li> <p>You can get the status of a drone using the <code>/drones/{id}</code> endpoint. It will include information about battery capacity, location, and delivery status.</p> </li> <li> <p>You can send drones out on delivery using the <code>/drones/{id}/send</code> <code>PUT</code> endpoint.</p> </li> </ol> <p>The DroneAPI is accessible at https://drone-api-jgxf.onrender.com/. The API explorer is accessible at https://drone-api-jgxf.onrender.com/explorer/.</p> <p>Here's a video walkthrough explaining the API:</p> <p>The status of both the CommerceFriend and DroneTech API servers can be found on this status page.</p>"},{"location":"project/node_js/","title":"Node.JS","text":""},{"location":"project/node_js/#introduction","title":"Introduction","text":"<p>NodeJS is a runtime for Javascript-based server applications, which has gained popularity in recent years because of its flexibility and ability to handle many concurrent connections. We ask that you write your server-side application in NodeJS, as you will need to write your frontend in Javascript anyway; meaning you (at worst) have to familiarize yourself with a single new language.</p> <p>While we will cover some of the fundamentals of NodeJS in recitation, you may need to spend additional time on some of the basics if you are not yet familiar with Node.  Here are some resources to help you become familiar with Node:</p> <ul> <li> <p>learnyounode   A CLI-based walkthrough of the basic patterns of NodeJS.</p> </li> <li> <p>Promises for Dummies   Promises are a programming pattern for simplifying asynchronous code.</p> </li> <li> <p>RxJS Tutorial   RxJS provides a set of library for reactive programming.</p> </li> </ul>"},{"location":"project/node_js/#setup","title":"Setup","text":"<p>To get started, follow the instructions on setting up your project repository provided in the starter repository.</p> <p>!&gt; We realize that this assignment introduces lots of new technologies at once. You should plan on coming to office hours, as the TAs will be glad to help!</p>"},{"location":"project/p1/","title":"Project 1: Product Specification","text":""},{"location":"project/p1/#learning-goals","title":"Learning Goals","text":"<ul> <li>Practice hypothesis testing and the MVP loop</li> <li>Refine your product idea</li> </ul>"},{"location":"project/p1/#project-context","title":"Project Context","text":"<p>You and your team will be spending the rest of the semester building a product prototype for your startup.  This assignment is intended to help you build something viable (that I hope will become the basis for a real company someday).</p> <p>Please read the assignment in its entirety before starting. As you move through parts 1 and 2 and refine your ideas/pivot, keep in mind the legal/regulatory/technical questions from part 3. In other words, try to make sure you're working on something legal and feasible even as your idea changes. </p>"},{"location":"project/p1/#deliverables","title":"Deliverables","text":"<p>These deliverables should be somewhat familiar from homeworks one and two. Now, you're doing them \"for real,\" trying to hone in on the product you and your group will be producing for the rest of the semester.</p>"},{"location":"project/p1/#1-initial-value-propositionproduct-description","title":"1. Initial value proposition/product description","text":""},{"location":"project/p1/#turn-in-instructions","title":"Turn-in instructions","text":"<p>Please answer the following questions:</p> <ol> <li>What is the big idea of your startup? What problem are you solving? What is your solution? What makes your solution special and distinguishes it from the competition? (1-2 paragraphs)</li> <li>What is/are the value proposition(s) for your product? (1-2 sentences)</li> </ol>"},{"location":"project/p1/#2-viability-analysis-do-people-want-it","title":"2. Viability analysis: do people want it?","text":"<p>In these exercises, you'll collect some initial viability data, and make a plan for collecting more as you build out your prototype. </p>"},{"location":"project/p1/#2a-measuredemonstrate-that-people-want-your-product-before-building-anything","title":"2a. Measure/demonstrate that people want your product before building anything","text":"<p>Recall the unbiased discovery you did during HW1. You're going to collect more data this time, from a broad range of members of your target demographic. If your target demographic is gymgoers, for example, you should talk to at least a few non-student gymgoers. This will help you determine who your target demographic actually is (and thus refine your value prop).</p> <p>You will have 20 or more discovery conversations across your group, with each team member conducting at least two conversations. These conversations should give you valuable data about the problem you're trying to solve; if you haven't been forced to refine your idea, at least slightly, over the course of these conversations, you are likely doing something wrong.</p>"},{"location":"project/p1/#turn-in-instructions_1","title":"Turn-in instructions","text":"<p>Please turn in:</p> <ol> <li>Your raw notes, demonstrating that every group member participated in at least two interviews.</li> <li>The five most useful questions you asked. (1 paragraph)</li> <li>The five most useful pieces of concrete data you collected. (1 paragraph)</li> <li>An updated version of your value proposition/product description (question 1), informed by your discovery. Describe what changed and why. (3+ paragraphs)</li> </ol>"},{"location":"project/p1/#2b-measuredemonstrate-that-people-want-your-product-after-building-something-minimal","title":"2b. Measure/demonstrate that people want your product after building something minimal","text":"<p>In class, we've discussed several ways to get feedback from users without building an entire application:</p> <ul> <li>Concierge MVPs</li> <li>Smokescreen MVPs</li> <li>Paper prototypes</li> <li>Kickstarter-style campaigns</li> <li>...etc.</li> </ul> <p>Choose which of these makes sense for your startup. Then, build, deploy, and advertise it for at least a week. You can drum up business from your friends, through flyers on campus, on social media, etc. Be creative!</p> <p>After you gather feedback from people, you may want to change your value proposition or the entire idea of the product! </p>"},{"location":"project/p1/#turn-in-instructions-1-2-pages","title":"Turn in instructions (1-2 pages)","text":"<p>Choose at least one data-gathering approach for your startup and describe:</p> <ol> <li>Why you chose it.</li> <li>What you built (with a link or pictures if relevant; for a smokescreen MVP, for example, please link to the MVP webpage or demo).</li> <li>How you gathered feedback (e.g., for your smokescreen MVP, where and how did you circulate the link?). </li> <li>What you learned from the feedback (e.g., did a thousand people view your webpage, while only one signed up for the list? What does that tell you?)</li> <li>An updated version of your value proposition/product description (question 1), informed by your data gathering. Describe what changed and why. </li> </ol>"},{"location":"project/p1/#2c-prototype-plan-how-little-can-you-build-and-still-get-valuable-feedback","title":"2c. Prototype plan: how little can you build and still get valuable feedback?","text":"<p>As you're refining your idea, it's important to figure out what you're going to build (and possibly start building!). In this milestone, you'll sketch out (a) your first two MVP sprints and (b) how you will get feedback on the user stories implemented in each sprint from real users.</p> <p>Describe, at a high level, the user stories you are building.</p>"},{"location":"project/p1/#backlog-turn-in-instructions-1-github-link","title":"Backlog turn in instructions (1 GitHub link)","text":"<ol> <li>Write the user stories for your product. Make sure you use the proper template:<ul> <li>As a &lt;user&gt;, I want &lt;action&gt; so that &lt;benefit&gt;.</li> <li>Estimate each user story's size as a t-shirt (Small, Medium, Large, Xtra-Large)</li> <li>Assign each user story a primary and secondary owner.</li> </ul> </li> <li>Prioritize the user stories into your product backlog. Assign each one to be done in a particular sprint.</li> <li>Enter these user stories into your GitHub Issues page on GitHub. Turn in a link to your GitHub Issues page.</li> </ol>"},{"location":"project/p1/#sprint-1-turn-in-instructions-1-2-pages","title":"Sprint 1 turn in instructions (1-2 pages)","text":"<ol> <li>What user stories will be done in this first sprint?</li> <li>Why are they the right user stories to work on now?</li> <li>How will you use these user stories to collect data about your what your users want?</li> <li>Describe what you will build in a reasonably low-level technical detail (e.g., what frameworks will you use, what API endpoints will you expose, what UI components will you create, etc).</li> </ol>"},{"location":"project/p1/#sprint-2-turn-in-instructions-1-2-pages","title":"Sprint 2 turn in instructions (1-2 pages)","text":"<ol> <li>What user stories do you anticipate will be done in this second sprint?</li> <li>Why are they the right user stories to work on?</li> <li>How will you use these user stories to collect data about your what your users want?</li> <li>Describe what you will build in a reasonably low-level technical detail (e.g., what frameworks will you use, what API endpoints will you expose, what UI components will you create, etc).</li> </ol>"},{"location":"project/p1/#3-viability-analysis-are-there-reasons-not-to-build-it-can-you-build-it","title":"3. Viability analysis: are there reasons not to build it? Can you build it?","text":"<p>Answering these questions will help you avoid attempting the impossible; please upload your answers for each.</p>"},{"location":"project/p1/#3a-legal-risk-turn-in-instructions-1-paragraph","title":"3a. Legal risk turn in instructions (1+ paragraph)","text":"<p>Are there any legal risks associated with your product? For example, could it condone or support illegal acts? Describe any potential legal risks you could foresee. This will require online research.</p>"},{"location":"project/p1/#3b-regulatory-risk-turn-in-instructions-1-paragraph","title":"3b. Regulatory risk turn in instructions (1+ paragraph)","text":"<p>Are there any regulatory risks associated with your product? For example, some medical or health products may require approval from the FDA or other government agency. This adds time and a potential to fail to obtain regulatory clearance. Describe any potential regulatory risks you could foresee. This will require online research.</p>"},{"location":"project/p1/#3c-competitor-risk-turn-in-instructions-3-paragraph","title":"3c. Competitor risk turn in instructions (3+ paragraph)","text":"<p>Describe your product's competitive landscape, including its three closest competitors. What do these products do? How is your product different?</p>"},{"location":"project/p1/#3d-technical-risk-turn-in-instructions-3-paragraph","title":"3d. Technical risk turn in instructions (3+ paragraph)","text":"<p>Describe, in a relatively fine-grained level of technical detail, what you are planning to build.</p> <p>What tools/frameworks/libraries are you planning to use for:</p> <ul> <li>The frontend</li> <li>The infrastructure</li> <li>The database</li> <li>Other technical core features. For example, if your product uses computer vision, what library are you planning to use?</li> </ul> <p>Explain why your group has the background to build these features. </p> <p>For example, if you're building devtools for ML data processing, please outline your experience with ML and data processing. </p>"},{"location":"project/p1/#3e-this-is-a-semester-long-course-risk-turn-in-instructions-1-paragraph","title":"3e. This-is-a-semester-long-course risk turn in instructions (1+ paragraph)","text":"<p>Please justify why it is possible to build a prototype product over the course of this semester-long class. </p> <p>As one anti-example, fabricating new chips for ML workloads is certainly an exciting thing to do, but it's also something you can't do over the next couple months. Avoid such endeavors.</p>"},{"location":"project/p1/#4-viability-analysis-can-you-make-any-money","title":"4. Viability analysis: can you make any money?","text":""},{"location":"project/p1/#turn-in-instructions_2","title":"Turn-in instructions","text":"<p>Please turn in answers to the following questions:</p> <ol> <li>What evidence do you have that people are willing to pay for your product? (2 paragraphs)</li> <li>What is your monetization plan? (1+ paragraph)</li> <li>What is your projected revenue across the first 10 users of your application? 50? 100? 1,000? (1-2 paragraphs)</li> <li>What is the value of similar competitors? (1-3 paragraphs)</li> </ol>"},{"location":"project/p2/","title":"Project 2: Implementation Milestone 1","text":""},{"location":"project/p2/#learning-goals","title":"Learning Goals","text":"<ul> <li>Practice and refine your Agile engineering approach</li> <li>Use what you've learned in the homeworks to build and plan to deploy an app</li> <li>Get feedback from users on an MVP</li> </ul>"},{"location":"project/p2/#project-context","title":"Project Context","text":"<p>You and your team will be spending the rest of the semester building a product prototype for your startup. This is the first technical towards your whole product MVP; at the end of this assignment, you will produce a minimal product that users can interact with.</p>"},{"location":"project/p2/#deliverables","title":"Deliverables","text":""},{"location":"project/p2/#1-repository-setup","title":"1. Repository setup","text":"<p>Over the course of the past homeworks, you've learned about automating your development setup: branch protection, CI, formatters, linters, PR templates, conventional commits, and more. It's time to create the development setup that works best for your specific project! At bare minimum, this setup should include:</p> <ul> <li>The requirement to review PRs before merging to main</li> <li>CI testing of some kind</li> <li>High level code review guidelines</li> <li>A lower-level code review checklist </li> </ul> <p>We expect to see something beyond the bare minimum. </p>"},{"location":"project/p2/#turn-in-instructions","title":"Turn in instructions","text":"<p>Please turn in:</p> <ul> <li>A link to your repository (after inviting the instructors to collaborate as admins).</li> <li>A bulleted list of all the rules, actions, workflows, and checklists you've set up, with a link to your repo and a justification for each one.</li> </ul>"},{"location":"project/p2/#2-deployment-overview","title":"2. Deployment overview","text":"<p>To actually ship your app, you'll need to deploy it somewhere. You do not need to deploy the whole thing right away, though you can choose to do so if you'd like. At minimum, for this step we need a detailed description of your deployment approach.</p> <p>You have access to an AWS account (the account from HW5) and AWS credits if you choose to use them. </p>"},{"location":"project/p2/#turn-in-instructions_1","title":"Turn in instructions","text":"<p>Please turn in a deployment plan for your application similar in detail to HW5. It should outline each step of your proposed deployment pipeline, and each step should link to the relevant documentation.</p>"},{"location":"project/p2/#3-sprint-1-two-weeks","title":"3. Sprint 1 (two weeks)","text":"<p>In P1, you planned your first two sprints. Now it's time to implement! You will:</p> <ul> <li>Take into account any feedback on your Sprint 1 and Sprint 2 plans from P1 and adjust as necessary.</li> <li>Hold a sprint planning meeting: assign user stories to members of your group and give those tasks deadlines.</li> <li>Organize a periodic standup. This should be very fast and can be remote if you prefer. You may want to run this every day or just a few days a week. We strongly recommend you have at least two standup meetings per week. One of them can be at your recitation section on Fridays.</li> <li>Implement PRs for each feature or bug ticket and review and merge those PRs.</li> <li>Record a video demo of the user stories you implemented (this can be done by anyone on your team).</li> <li>Hold a sprint retrospective.</li> </ul>"},{"location":"project/p2/#turn-in-instructions_2","title":"Turn in instructions","text":"<p>You will turn in:</p> <ul> <li>A link to your GitHub project tracker, which should clearly show tickets, who they are assigned to, and when the corresponding PRs were merged.</li> <li>A writeup of your sprint retrospective. What worked well this sprint? What will you change for next sprint?</li> <li>A description of how to how to use your app and try out the user stories you've implemented; for example, you might describe how to build a website locally and then how to interact with that website to test out the user stories you have implemented. The instructors will follow these instructions when grading your demo, so make sure they work. </li> <li>A URL to the video demos of your user stories; please upload the demos to YouTube and keep them private.</li> </ul>"},{"location":"project/p2/#5-user-feedback","title":"5. User feedback","text":"<p>You must pilot test the portion of your app that you have built with one other person in the class who is not on your team. You should document the pilot test through recordings, transcripts, and analysis of how it went and lessons learned. You must document changes to any user stories that were inspired by the results of the pilot.</p>"},{"location":"project/p2/#turn-in-instructions_3","title":"Turn in instructions","text":"<p>Turn in the transcripts and analysis of the pilot test. Do not turn in the raw recordings. Those are for your team to review in case someone was not available to be at the pilot test.</p>"},{"location":"project/p3/","title":"Project 3: Implementation Milestone 2","text":""},{"location":"project/p3/#learning-goals","title":"Learning Goals","text":"<ul> <li>Practice and refine your Agile engineering approach</li> <li>Get feedback from users on an MVP</li> </ul>"},{"location":"project/p3/#project-context","title":"Project Context","text":"<p>You and your team have been working on the product prototype for your  startup. This is the second technical assignment towards your whole product MVP; at the end of this, you will produce an intermediate product that users can interact with.</p>"},{"location":"project/p3/#deliverables","title":"Deliverables","text":""},{"location":"project/p3/#1-sprint-2-two-weeks","title":"1. Sprint 2 (two weeks)","text":"<p>In P2, you ran your first sprint. Now, keep going! You will:</p> <ul> <li>Take into account any feedback on your Sprint 1 plan from P2 and adjust as necessary.</li> <li>Hold a sprint planning meeting: assign user stories to members of your group and give those tasks deadlines.</li> <li>Continue running your periodic standup meetings. </li> <li>Implement PRs for each feature or bug ticket and review and merge those PRs.</li> <li>Record a video demo of the user stories you implemented (this can be done by anyone on your team).</li> <li>Hold a sprint retrospective.</li> </ul>"},{"location":"project/p3/#turn-in-instructions","title":"Turn in instructions","text":"<p>You will turn in:</p> <ul> <li>A link to your GitHub project tracker, which should clearly show tickets, who they are assigned to, and when the corresponding PRs were merged.</li> <li>A writeup of your sprint retrospective. What worked well this sprint? What will you change for next sprint?</li> <li>A description of how to how to use your app and try out the user stories you've implemented; for example, you might describe how to build a website locally and then how to interact with that website to test out the user stories you have implemented. The instructors will follow these instructions when grading your demo, so make sure they work. </li> <li>A URL to the video demos of your user stories; please upload the demos to YouTube and keep them private.</li> </ul>"},{"location":"project/p3/#2-user-feedback","title":"2. User feedback","text":"<p>You must pilot test the portion of your app that you have built with one other person in the class who is not on your team and who did not pilot the app for P2. You should document the pilot test through recordings, transcripts, and analysis of how it went and lessons learned. You must document changes to any user stories that were inspired by the results of the pilot.</p>"},{"location":"project/p3/#turn-in-instructions_1","title":"Turn in instructions","text":"<p>Turn in the transcripts and analysis of the pilot test. Do not turn in the raw recordings. Those are for your team to review in case someone was not available to be at the pilot test.</p>"},{"location":"project/p4/","title":"Project 4: Implementation Milestone 3","text":""},{"location":"project/p4/#learning-goals","title":"Learning Goals","text":"<ul> <li>Practice and refine your Agile engineering approach</li> <li>Get feedback from users on an MVP</li> </ul>"},{"location":"project/p4/#project-context","title":"Project Context","text":"<p>You and your team have been working on the product prototype for your  startup. This is the third technical assignment towards your whole product MVP; at the end of this, you will produce an almost complete product that users can interact with.</p>"},{"location":"project/p4/#deliverables","title":"Deliverables","text":""},{"location":"project/p4/#1-sprint-3-two-weeks","title":"1. Sprint 3 (two weeks)","text":"<p>In P3, you ran your second sprint. Now, keep going! You're almost at the finish line!  You will:</p> <ul> <li>Take into account any feedback on your Sprint 2 plan from P3 and adjust as necessary.</li> <li>Hold a sprint planning meeting: assign user stories to members of your group and give those tasks deadlines.</li> <li>Continue running your periodic standup meetings. </li> <li>Implement PRs for each feature or bug ticket and review and merge those PRs.</li> <li>Record a video demo of the user stories you implemented (this can be done by anyone on your team).</li> <li>Hold a sprint retrospective.</li> </ul>"},{"location":"project/p4/#turn-in-instructions","title":"Turn in instructions","text":"<p>You will turn in:</p> <ul> <li>A link to your GitHub project tracker, which should clearly show tickets, who they are assigned to, and when the corresponding PRs were merged.</li> <li>A writeup of your sprint retrospective. What worked well this sprint? What will you change for the final sprint of the project?</li> <li>A description of how to how to use your app and try out the user stories you've implemented; for example, you might describe how to build a website locally and then how to interact with that website to test out the user stories you have implemented. The instructors will follow these instructions when grading your demo, so make sure they work. </li> <li>A URL to the video demos of your user stories; please upload the demos to YouTube and keep them private.</li> </ul>"},{"location":"project/p4/#2-user-feedback","title":"2. User feedback","text":"<p>You must pilot test the portion of your app that you have built with two other people in the class who are not on your team and who did not pilot the app for P2 or P3. You should document the pilot test through recordings, transcripts, and analysis of how it went and lessons learned. You must document changes to any user stories that were inspired by the results of the pilot.</p>"},{"location":"project/p4/#turn-in-instructions_1","title":"Turn in instructions","text":"<p>Turn in the transcripts and analysis of the pilot tests. Do not turn in the raw recordings. Those are for your team to review in case someone was not available to be at the pilot tests.</p>"},{"location":"project/p5/","title":"Project 5: Final Project Presentation","text":""},{"location":"project/p5/#learning-goals","title":"Learning Goals","text":"<ul> <li>Learn to pitch your project to investors and users</li> </ul>"},{"location":"project/p5/#project-context","title":"Project Context","text":"<p>You have finished your prototype, honed your technology, and polished your demo.  Your startup is ready to launch!  You have some initial evidence  about how your users are responding to your app. You are confident that your  business plan will succeed and make you wealthy beyond your wildest dreams.</p> <p>You have entered a startup competition to see who can hook a shark --- an investor  with deep pockets --- who will fund your startup and get you to the next level.</p> <ul> <li>Slide Upload Date - Sunday, May 4, 2025, 11:59pm.</li> <li>Presentation Date - Monday, May 5, 2025, 1pm-4pm, during the exam timeslot.</li> </ul>"},{"location":"project/p5/#deliverable","title":"Deliverable","text":""},{"location":"project/p5/#final-project-presentation-15-minutes","title":"Final Project Presentation (15 minutes)","text":"<ul> <li>Presentations are 15 minutes long, with 5 minutes Q&amp;A.</li> <li>The order of presentations is randomly determined.</li> <li>Participation from all team members during the presentation is required. Absent team members will lose points individually.</li> <li>Every classmate will be given $1,000 (fake money) to fund your favorite startups in the class (other than your own). You will also offer constructive feedback for other startup presentations in class via a paper form (which we will provide day-of).</li> </ul> <p>In this presentation, you will show your investors (the class!) a walkthrough of your end-to-end MVP along with your business plan. You do not need to include details related to the backend. Your investors are mostly interested in seeing the progress and functionality of your product and how you plan to make money. Your presentation must include a demo of your top user stories. You may use slides but are not required to. </p> <p>All team members must participate. Each team member must speak for at least 3 minutes of time (total over the whole presentation).</p> <p>The following presentation elements are required (but may be combined as appropriate), not necessarily in this order:</p> <ul> <li>Introduce your team name, team members, and each member's roles as they actually ended up playing them throughout the semester.</li> <li>Introduce the main concept of your MVP.</li> <li>Introduce the business plan. Show us how you convinced yourselves this plan was viable. </li> <li>Demo your MVP (in a walkthrough organized by user stories, not by features).</li> <li>Describe any external feedback (from outside your team) that you received on your MVP.</li> <li>What metrics are you collecting and monitoring that help you evaluate your business plan? </li> <li>Imagine your product is wildly successful and gains millions of users in a very short period of time. <ol> <li>What is the first technical part of the implementation that will break and how could you fix it?</li> <li>What is the first part of your business plan that will need to be modified? </li> </ol> </li> <li>Each individual team member must explain the most important lesson they personally learned throughout the process of developing the team's MVP and business plan.</li> <li>Somewhere in the presentation, you must name drop someone famous or important in the same technical field as your application concept. The person you name drop must be alive. Make it sound like this person is your long-time friend.</li> </ul>"},{"location":"project/p5/#turn-in-instructions","title":"Turn in instructions","text":"<p>You must upload your slides as a single PDF document to Gradescope by Sunday, May 4th, 11:59pm.</p>"},{"location":"project/team-contract/","title":"Project 0: Team Contract","text":""},{"location":"project/team-contract/#learning-goals","title":"Learning Goals","text":"<ul> <li>Make initial decisions on a team process, and reflect on your experience with the process</li> <li>Define version control and development best practices within the context of a group assignment</li> </ul>"},{"location":"project/team-contract/#project-context","title":"Project Context","text":"<p>You have just been assigned to a team to work on your startup. Now, you need to come together to discuss one another's backgrounds and skills, negotiate your team norms, and write up a team contract. These include communication standards, time expectations, division of labor, a definition of equitable contribution, and procedures for managing conflicts within the team.</p>"},{"location":"project/team-contract/#team-setup","title":"Team Setup","text":""},{"location":"project/team-contract/#slack-channel","title":"Slack Channel","text":"<p>In the 17-356/776 Slack workspace, create a new private Slack channel that includes all your team members and all of the instructors (Andrew Begel, Fraser Brown, Aditya Shrivastava, and Jacqueline Tsai).</p> <p>Use this Slack channel to collectively decide on a team name. Your team name should be unique, pronounceable, short, and something you would be proud to shout in your team cheer on the streets of Pittsburgh in the presence of small, impressionable, multilingual children. Once you have a team name, rename your team Slack channel to <code>#team-&lt;teamname&gt;</code>.</p> <p>You can use this Slack channel for subsequent project-team related discussions or specialized Q&amp;A with your instructors for the rest of the semester.</p> <p>Each team will be advised by one of the two TAs, Aditya or Jacqueline. After your team is formed, they will tell you which one will be assigned to be your advisor.</p>"},{"location":"project/team-contract/#project-deliverables-repositories","title":"Project Deliverables Repositories","text":"<p>As you work on your project, you will generate a set of deliverables. You must store these deliverables in appropriate repositories.</p> <ol> <li>Specifications and other written documents must be stored in a Google Drive folder. Create a new Google Drive folder, invite the other team members to it, and be sure to provide view access to all of the course instructors.</li> <li>Designs and presentations may be developed in a variety of tools, but often in Canva, Figma, Google Slides, or PowerPoint. For anything stored in the cloud, be sure to provide view access to all of the course instructors in addition to your teammates. </li> <li>Software code must be stored in a GitHub repository to ensure that it can be versioned and never lost. You should use this repository for all of your developed code. Be sure to use good development practices, including keeping your commits cohesive and your commit messages informative. You must give access to all of the course instructors through their GitHub usernames (abegel, mlfbrown, adittyashrivastava, Jacqueline-Tsai).</li> <li>Project management must be done with professional tools like Asana, Trello, Basecamp, Jira, Smartsheet, GitHub Issues, or another tool of your choice. You should create items for feature improvements and bug fixes. You should assign these items to particular team members and tag them with appropriate labels. When making changes to your code repository, you must reference the project management issue you are working on. Invite the course instructors to your project management tool.</li> </ol>"},{"location":"project/team-contract/#main-deliverable","title":"Main Deliverable","text":""},{"location":"project/team-contract/#teamwork-contract","title":"Teamwork Contract","text":"<p>When working with a team, it is important to discuss each team member\u2019s background, and establish common expectations of the team. Miscommunication or the general lack of communication are the most common causes of team conflict. </p> <p>Team Conflict Example</p> <p>A common conflict in working style is when there are team members who always want to get a headstart on their work, while there are team members who are fine with doing work a few days before the deadline. It causes panic in the former team members, while the latter team members feel frustrated as to why they are being rushed. </p> <p>As such, your first process task of the semester will be creating a teamwork contract with your teammates. It is a 1 - 2 page document containing information that all teammates agree to follow. You should work on the contract with all members present. We recommend that you keep it to around 1 page, 2 pages is a hard limit.</p> <p>Additionally, it is more important that you only include statements that the team will adhere to than it is to fulfill the length requirement (quality over quantity!) You do not need to write full sentences (bullet points are okay), but your decisions must be clearly conveyed in the document.</p> <p>You are free to include anything that your team deems necessary, but you should minimally address the following sections:</p> <ol> <li> <p>Expectations How much time is each team member expected to be putting into working on projects? Punctuality?  How would your team accommodate when unexpected commitments come up for a team member (e.g. interviews, sickness, competitions)? Do account for the fact that project load can get heavier towards the end of the semester. </p> </li> <li> <p>Communication What platform(s) will your team be using to communicate? What is the expected time to get a response?  For any communication platforms you decide on, please test that everyone can receive notifications.  We highly recommend using apps (Slack, Discord) over browser-based sites. Who should be in charge of tracking down teammates that may be ghosting you? Assign someone to make sure that everyone communicates regularly.</p> </li> <li> <p>Meeting Schedule When and how will your team meet? What modality would it use?  A strong recommendation would be to set up a recurring 1 hour meeting blocked out for the rest of the semester,  so that your team does not have to scramble to find a common meeting time each week.  Teams that have recurring meetings are generally more successful in the class.</p> </li> <li> <p>Responsibilities How will you divide responsibilities for each part of the project? During meetings,  who will be in charge of note taking, organizing &amp; running those meetings?  Often, a natural project manager will emerge, who will ensure the project moves towards completion.  Throughout the semester, we will ask for documentation of your meeting notes,  so be sure to keep them organized (we recommend using a shared Drive folder).</p> </li> <li> <p>Equitable Contribution &amp; Conflict Resolution What are the steps the team would take to address teammates who are contributing too little,  and when will the team bring this up to the instructors?  What are the steps to bring up and discuss potential teamwork issues? The first thing the staff will ask the student when they mention that they are facing team issues  is if they have followed the steps on their team contract. How will you continue to work in the case of an irresolvable conflict between team members?  We recognize that intra-team conflict occurs, but we also need to see results.  Write down a set of practices you will follow to enable team members in a  fight to continue to contribute without interfering with the functioning of the rest of the team.</p> </li> </ol> <p>Feel free to seek the assistance of TAs and instructors in drafting this document. </p> <p>Note</p> <p>We will ask you to reference, reflect upon, and refine this document throughout this semester, and we will evaluate your team's process strategies and interactions through what you outline in this contract. Please ensure that everyone on your team thoroughly discusses each of the above sections and agree with the final decisions.</p> <p>Once you have completed the contract itself, have all members sign and date the document as an indicator that all members have read the document and agreed to uphold all outlined items. Then, save the file as a PDF and upload it to Gradescope. Only one team member needs to make the submission; they can then add the rest of the teammates as group members for a group submission. </p> <p>We also highly recommend that you bookmark the teamwork contract in your team\u2019s Slack channel.</p>"},{"location":"project/team-contract/#deliverables-and-deadlines","title":"Deliverables and Deadlines","text":"<p>This is a group assignment with one (1) deliverable. </p> <ol> <li>Teamwork Contract - 100 points - due Tuesday, Feb 4, 11:59pm.</li> </ol> <p>To receive full credit for the teamwork contract, we expect:</p> <ul> <li> All sections listed above are addressed in a roughly 1-2 page PDF document submitted to Gradescope</li> <li> Document demonstrates a clear process outline that was discussed between and agreed upon by the teammates</li> <li> All group members\u2019 signatures at the end of the document</li> </ul>"},{"location":"project/ui/","title":"UI Development","text":""},{"location":"project/ui/#introduction","title":"Introduction","text":"<p>MVC stands for Model, View, Controller. It is a pattern for developing software applications.  We will explain more about this in recitation, though there are an abundance of tutorials online.</p>"},{"location":"project/ui/#choosing-a-ui-libraryframework","title":"Choosing a UI library/framework","text":"<p>There are many MV* Frameworks and UI development libraries to choose from. Not all of them are truly MVC (like React for instance), but many are fully featured. While you may choose any framework you wish, we strongly encourage you to use one of the following:</p> <ul> <li> <p>Angular 5    Developed predominately by Google, Angular   is a highly powerful MVC framework. While   it has a steep learning curve, it also has   direct bindings for Loopback.</p> </li> <li> <p>React    Developed predominately by Facebook/Meta, React is   a lighter-weight framework. It is fairly easy   to learn and extremely popular.</p> </li> <li> <p>Vue.js    Vue.js is another popular choice. It's performant and   easy to learn, but there are fewer resources available   compared to React.</p> </li> <li> <p>Svelte    Svelte has become a popular framework as of late,   as it's focused on coverting your app into performant   Javascript at build time (i.e. compile time), rather   than interpreting your code at run time.</p> </li> </ul>"},{"location":"recitations/","title":"Index","text":"<p>Coming soon!</p>"},{"location":"recitations/reci1-user-discovery/","title":"Recitation 1 - User Discovery","text":""},{"location":"recitations/reci1-user-discovery/#step-1-choose-a-focusidea","title":"Step 1: Choose a Focus/Idea","text":"<ul> <li>What problems are you suited to solve?</li> </ul>"},{"location":"recitations/reci1-user-discovery/#step-2-design-a-set-of-questions","title":"Step 2: Design a Set of Questions","text":"<ul> <li>Their life story &gt;&gt;&gt; Your idea</li> <li>Past &gt;&gt;&gt; Future</li> </ul>"},{"location":"recitations/reci1-user-discovery/#step-3-ask-people-questions","title":"Step 3: Ask People Questions","text":"<ul> <li>Find 4 people in your target demographic, talk to them:</li> <li>Friends</li> <li>Strangers on the street</li> <li>LinkedIn</li> <li>Don\u2019t use people in the class for homework.</li> <li>GPT is not a person.</li> </ul>"},{"location":"recitations/reci1-user-discovery/#exercise-choose-a-focus-5-minutes","title":"Exercise: Choose a Focus (5 minutes)","text":"<ul> <li>What problem do you want to solve?   Could be a pain point for you or someone you know.</li> </ul>"},{"location":"recitations/reci1-user-discovery/#exercise-write-down-a-set-of-questions-5-minutes","title":"Exercise: Write Down a Set of Questions (5 minutes)","text":"<ul> <li>Collect as much concrete, relevant information about pain points as possible.</li> <li>If the other person is clearly not a member of your target demographic:</li> <li>Try to collect insights anyway (though at a certain point, you may have to give up).</li> </ul>"},{"location":"recitations/reci1-user-discovery/#avoid","title":"Avoid:","text":"<ul> <li>Asking unhelpful questions:</li> <li>Too much assumption.</li> <li>Questions that lead to biased answers.</li> <li>Wrong target audience.</li> <li>Design questions to gather information efficiently.</li> </ul>"},{"location":"recitations/reci1-user-discovery/#exercise-ask-people-questions-10-minutes","title":"Exercise: Ask People Questions (10 minutes)","text":"<ul> <li>Practice with classmates (2 people per group).</li> <li>Allow space for general conversation, since the idea is early-stage.</li> </ul>"},{"location":"recitations/reci1-user-discovery/#retrospective","title":"Retrospective","text":"<ul> <li>What you learned from these discovery conversations:</li> <li>What problems did they have?</li> <li>How did they solve them?</li> <li>What wasn\u2019t a problem?</li> <li>What does this mean to your:</li> <li>Product</li> <li>Focus area</li> <li>Problem of choice</li> </ul>"},{"location":"recitations/reci2-nodejs/","title":"Recitation 2: Node.js","text":""},{"location":"recitations/reci2-nodejs/#overview","title":"Overview","text":"<p>This recitation aims to highlight the basics of Node.js by walking students through the implementation of a basic To-Do app.</p>"},{"location":"recitations/reci2-nodejs/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci2-nodejs/#full-stack-development","title":"Full-stack Development","text":"<p>Different levels of the stack: - Backend - Frontend - Database - Deployment - Testing and more</p>"},{"location":"recitations/reci2-nodejs/#backend-development-using-nodejs","title":"BACKEND DEVELOPMENT USING NODE.JS","text":""},{"location":"recitations/reci2-nodejs/#what-is-node","title":"What is Node?","text":"<ul> <li>Back-end JavaScript runtime environment, runs on the V8 JavaScript Engine</li> <li>Used for server-side scripting</li> <li>Has an event-driven architecture capable of asynchronous(non-blocking) I/O.</li> <li>Used to build fast, powerful and scalable web applications</li> </ul>"},{"location":"recitations/reci2-nodejs/#asynchronous-or-non-blocking-io","title":"Asynchronous or Non-blocking I/O","text":"<p>Every request consists of:</p> <p></p> <ul> <li>Non-blocking I/O allows a thread to suspend a request while it\u2019s performing I/O to go work on a different request</li> <li>Runs on a single-thread event loop, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching</li> <li>Concurrency (in Node) refers to the Event Loop\u2019s capacity to execute Javascript \u201ccallback\u201d functions after completing other work</li> </ul>"},{"location":"recitations/reci2-nodejs/#node-js-async-options","title":"Node js async options","text":"<ul> <li>Callbacks: Functions passed to another functions</li> <li>Promises (and promise chains): Structured callbacks</li> <li>Generators: Functions which can be exited/paused and later re-entered</li> <li>Async/Await: Combining generators and promises</li> </ul>"},{"location":"recitations/reci2-nodejs/#node-package-manager-npm","title":"Node Package Manager (npm)","text":"<p>Consists of: - npm client - command line tool - npm registry - an online database of public and paid-for private packages</p> <p>The largest ecosystem of open-source libraries in the world</p>"},{"location":"recitations/reci2-nodejs/#model-view-controller-mvc","title":"Model View Controller (MVC)","text":""},{"location":"recitations/reci2-nodejs/#model-view-viewmodel-mvvm","title":"Model View Viewmodel (MVVM)","text":""},{"location":"recitations/reci2-nodejs/#a-simple-to-do-app-using-nodejs","title":"A SIMPLE TO-DO APP USING NODE.JS","text":"<ol> <li><code>mkdir</code> into your project folder (todo-app) and <code>cd</code> into it</li> <li><code>npm init</code></li> <li><code>npm i --save-dev typescript @types/node @types/express npm i cors dotenv mongoose</code></li> <li>Create tsconfig.json file</li> <li>Write code, as seen in either the MongoDB or Postgres reference solution</li> <li><code>npm start</code> (to start the server)</li> <li>(optional) Play with the server, send it post requests</li> </ol>"},{"location":"recitations/reci2-nodejs/#steps-for-building-off-of-references","title":"Steps for building off of references","text":"<ol> <li>Clone either the MongoDB or Postgres reference solution</li> <li>cd into server directory with <code>cd server</code></li> <li>Run <code>npm install</code> in command line</li> <li>Run <code>npm start</code> in command line</li> <li>(optional) Play with the server, send it post requests</li> </ol>"},{"location":"recitations/reci2-nodejs/#upcoming","title":"Upcoming","text":"<ul> <li>Download Postman to test your server/API</li> <li>Homework 2 due Thursday</li> <li>Meet with your group soon if you haven\u2019t already!</li> </ul>"},{"location":"recitations/reci2-viability-analysis/","title":"Recitation 2: Viability Analysis","text":""},{"location":"recitations/reci2-viability-analysis/#overview","title":"Overview","text":"<p>This recitation will give you the opportunity to familiarize yourself with viability analysis of your startup idea and help you capture the end user perspective as you conceive of the product you want to build.</p>"},{"location":"recitations/reci2-viability-analysis/#staff-overview","title":"Staff Overview","text":"<ul> <li>Jacqueline Tsai &amp; Aditya Shrivastava</li> <li>Emails: yunhsuat@andrew.cmu.edu &amp; ashriva3@andrew.cmu.edu</li> <li>Office Hours: Wed 4:00 - 5:00pm (Aditya), Thur 4:00 - 5:00pm (Jacqueline)</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#minimum-viable-product","title":"Minimum Viable Product","text":""},{"location":"recitations/reci2-viability-analysis/#purposes-for-building-minimum-viable-product","title":"Purposes for building Minimum Viable Product:","text":"<ul> <li>Early Testing Opportunity</li> <li>User Feedback</li> <li>Data-Driven Decision Making</li> <li>Idea formations</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#case-studies-airbnb","title":"Case Studies -  AirBnB","text":"<ul> <li>MVP \u2013 Air Mattress Renting Service@Home</li> <li>Idea to Validate \u2013 Short Term Rental for Travelers</li> <li>Simple Website to list their space and accept bookings</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#case-studies-instagram","title":"Case Studies -  Instagram","text":"<ul> <li>MVP \u2013 Photo sharing and location check-ins</li> <li>Idea to Validate \u2013 Users\u2019 interests in sharing photos</li> <li>Simple mobile app to share updates</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#case-studies-spotify","title":"Case Studies -  Spotify","text":"<ul> <li>MVP \u2013 Desktop App with Limited features just to support streaming music</li> <li>Idea to Validate \u2013 Traction for a seamless music experience with minimal buffering</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#smokescreen-mvp","title":"Smokescreen MVP","text":"<p>A facade used to gather customer interest without fully developing the product</p>"},{"location":"recitations/reci2-viability-analysis/#purpose","title":"Purpose:","text":"<ul> <li>Test critical assumptions</li> <li>Measure customer behaviour</li> <li>Validate ideas before heavy investments</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#lets-try-it-out","title":"Let\u2019s Try It Out!","text":"<ul> <li>Create a simple landing page or prototype</li> <li>Include core features or product description</li> <li>Add a clear \u201cCall To Action\u201d</li> <li>Measure Customer Response and Engagement</li> <li>Analyze Data and Make Informed Decisions</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#food-for-thought","title":"Food for thought","text":"<ul> <li>How to deliver an idea in a few words? (Elevator Pitch)</li> <li>How to design a smokescreen that communicates this idea effectively? <ul> <li>Example: https://duckduckgo.com</li> </ul> </li> </ul>"},{"location":"recitations/reci2-viability-analysis/#homework-2-create-a-smokescreen","title":"Homework 2 - Create a Smokescreen","text":""},{"location":"recitations/reci2-viability-analysis/#must-contain","title":"Must Contain:","text":"<ul> <li>Landing Page</li> <li>Your Product Idea</li> <li>Paper Prototype (such as Fake Screenshots)</li> <li>A Textbox and Button that people can use to contact you</li> </ul> <p>No Backend/Database Required</p> <p>Simple HTML/JavaScript/CSS, or other Frameworks you\u2019re comfortable with</p>"},{"location":"recitations/reci2-viability-analysis/#some-templates","title":"Some templates:","text":"<ul> <li>w3schools</li> <li>GitHub search</li> <li>Figma</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#deployment","title":"Deployment","text":"<ul> <li>Local/no deployment: open index.html -&gt; convert to PDF</li> <li>Free web hosting for static website: GitHub.io</li> </ul>"},{"location":"recitations/reci2-viability-analysis/#steps-to-deploy-on-githubio","title":"Steps to deploy on GitHub.io:","text":"<ul> <li>Create a GitHub account &amp; Create a repository</li> <li>Name the repository your username</li> <li>Go to Setting -&gt; Page, set branch and deployment</li> <li>Access your website on https://{your-username}.github.io</li> <li>All contents on the website should be pushed (be careful when pushing confidential data)</li> </ul>"},{"location":"recitations/reci3-nodejs/","title":"Recitation #3","text":""},{"location":"recitations/reci3-nodejs/#17-35617-766","title":"17-356/17-766","text":""},{"location":"recitations/reci3-nodejs/#what-is-nodejs","title":"What is Node.js","text":"<ul> <li>Open-source, cross-platform JavaScript runtime environment.</li> <li>Event-driven architecture capable of asynchronous (non-blocking) I/O.</li> <li>Suitable for fast, powerful, and scalable web applications.</li> <li>JavaScript and Node.js are the most popular technologies for web development.</li> </ul>"},{"location":"recitations/reci3-nodejs/#npm-node-package-manager","title":"Npm (Node Package Manager)","text":"<ul> <li>Largest ecosystem of open-source libraries in the world.</li> <li>npm registry - an online database of public and paid-for private packages.</li> </ul>"},{"location":"recitations/reci3-nodejs/#how-to-find-reliable-secure-packages","title":"How to find reliable, secure packages:","text":"<ol> <li>Run <code>npm audit</code> after installing to check for vulnerabilities.</li> <li>Look for an active GitHub repository (stars, forks, and issues).</li> <li>Check <code>package.json</code> dependencies:     <pre><code>\"dependencies\": {\n  \"axios\": \"^1.7.9\",\n  \"cra-template\": \"1.2.0\",\n  \"react\": \"^18.0.0\",\n  \"react-dom\": \"^18.0.0\",\n  \"react-scripts\": \"5.0.1\",\n  \"web-vitals\": \"^4.2.4\"\n}\n</code></pre></li> </ol>"},{"location":"recitations/reci3-nodejs/#simple-web-architecture","title":"Simple Web Architecture","text":"<ul> <li>Frontend: React / Vue + RESTful APIs</li> <li>Backend: Node.js</li> <li>Database: PostgreSQL / MySQL / MongoDB</li> </ul>"},{"location":"recitations/reci3-nodejs/#nodejs-mongodb","title":"Node.js + MongoDB","text":""},{"location":"recitations/reci3-nodejs/#what-is-mongodb","title":"What is MongoDB?","text":"<ul> <li>NoSQL document-based database.</li> <li>Stores data in JSON-like BSON format.</li> <li>Scalable, flexible, and schema-less.</li> </ul>"},{"location":"recitations/reci3-nodejs/#schema-example","title":"Schema Example:","text":"<pre><code>{\n  \"name\": \"Harry Potter\",\n  \"author\": {\n    \"name\": \"J.K. Rowling\",\n    \"followers\": 789\n  },\n  \"views\": 123456\n}\n</code></pre>"},{"location":"recitations/reci3-nodejs/#nodejs-asynchronous-execution","title":"Node.js Asynchronous Execution","text":"<pre><code>function function1() {\n    setTimeout(() =&gt; {\n        console.log('function1');\n    }, 1000); // Delays execution by 1 second\n}\nfunction function2() {\n    console.log('function2');\n}\nfunction main() {\n    function1();\n    function2();\n}\n</code></pre>"},{"location":"recitations/reci3-nodejs/#output","title":"Output","text":"<pre><code>function2\nfunction1\n</code></pre>"},{"location":"recitations/reci3-nodejs/#callback-functions","title":"Callback Functions","text":"<ol> <li>Functions passed to another function</li> <li>Executes the callback after function1 completes</li> </ol> <p>Example <pre><code>function function1(callback) {\n    setTimeout(() =&gt; {\n        console.log('function1');\n        callback();\n    }, 1000);\n}\nfunction function2() {\n    console.log('function2');\n}\nfunction main() {\n    function1(function2);\n}\n</code></pre></p>"},{"location":"recitations/reci3-nodejs/#output_1","title":"Output","text":"<pre><code>function1\nfunction2\n</code></pre>"},{"location":"recitations/reci3-nodejs/#promises-and-promise-chains","title":"Promises and Promise Chains","text":"<ol> <li>Structured callbacks that avoid \"callback hell\".</li> <li>Resolves the promise after function1 completes.</li> </ol> <p>Example <pre><code>function function1() {\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; {\n            console.log('function1');\n            resolve();\n        }, 1000);\n    });\n}\nfunction function2() {\n    console.log('function2');\n}\nfunction main() {\n    function1().then(function2); // Waits for function1 before running function2\n}\n</code></pre></p> <p>Output <pre><code>function1\nfunction2\n</code></pre></p>"},{"location":"recitations/reci3-nodejs/#generators","title":"Generators","text":"<ol> <li>Functions that can be exited/paused and later renamed</li> </ol> <p>Example <pre><code>function* main() {\n    yield new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; {\n            console.log('function1');\n            resolve();\n        }, 1000);\n    });\n\n    console.log('function2');\n}\nconst generator = main();\ngenerator.next().value.then(() =&gt; generator.next());\n</code></pre></p> <p>Output <pre><code>function1\nfunction2\n</code></pre></p>"},{"location":"recitations/reci3-nodejs/#asyncawait","title":"Async/Await","text":"<ol> <li>Combines generators and promises.</li> <li>Waits for function1 before running function2.</li> <li>Functions that use await must be declared as async.</li> </ol> <pre><code>function function1() {\n    return new Promise((resolve) =&gt; {\n        setTimeout(() =&gt; {\n            console.log('function1');\n            resolve();\n        }, 1000);\n    });\n}\nfunction function2() {\n    console.log('function2');\n}\nasync function main() {\n    await function1();\n    function2();\n}\n</code></pre> <pre><code>function1\nfunction2\n</code></pre>"},{"location":"recitations/reci3-react/","title":"Recitation 3: React (Frontend)","text":""},{"location":"recitations/reci3-react/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci3-react/#concept-frontend","title":"Concept: Frontend","text":"<ul> <li>What the user sees + interacts with.</li> <li>\u201cClient-side code\u201d</li> <li>Probably know of HTML/CSS/JS. You can build vanilla frontends.</li> <li>We will learn React (https://reactjs.org)</li> </ul>"},{"location":"recitations/reci3-react/#visual","title":"Visual","text":""},{"location":"recitations/reci3-react/#interruption-styling-and-css","title":"Interruption: Styling and CSS","text":"<ul> <li>We don\u2019t have a dedicated recitation for styling, because there are so many many systems you can follow.</li> <li>Google is your friend.</li> </ul>"},{"location":"recitations/reci3-react/#intro-to-reactjs-or-just-react","title":"Intro to ReactJS (or just React)","text":"<ul> <li>Created 2011 (by Facebook)</li> <li>\u201cFrontend JS Library\u201d (technically not a framework, but its chill)</li> <li>Declarative, Component-Based</li> <li>Uses JSX syntax (HTML inside your JS)</li> </ul>"},{"location":"recitations/reci3-react/#react-components-props","title":"React: Components + Props","text":"<ul> <li>\u201cReact Only Updates What\u2019s Necessary\u201d</li> <li>Function vs Class components </li> <li>You can nest components (intuitive)</li> <li>STRICT Rule: \u201cAll React components must act like pure functions with respect to their props\u201d (this does not apply to State)</li> </ul>"},{"location":"recitations/reci3-react/#react-components-state","title":"React: Components + State","text":"<ul> <li>Component State = saved (and usually important) information about a component</li> <li>Changing state -&gt; trigger a component reload</li> <li>Do not modify state directly (will not trigger reload). Use React\u2019s state funcs.</li> </ul>"},{"location":"recitations/reci3-react/#react-data-states-props-flow","title":"React: Data (States &amp; Props) Flow","text":"<ul> <li>Parent-Child relationships (think Tree)</li> <li>State is always local, but can flow downwards (to children) as props.</li> <li>Common Workaround: pass a state-modifying function as prop to child.</li> <li> <p>Child can then call the passed function to indirectly modify parent state.</p> </li> <li> <p>Summary: State flows down (waterfall). Changes can sometimes flow back up.</p> </li> <li>(We will learn about state management libraries later on)</li> </ul>"},{"location":"recitations/reci3-react/#react-design-process","title":"React: Design Process","text":"<p>How to think + code like a React dev: - Break UI into component list/hierarchy (form the Tree) - Build static version of UI first - Compatible with data models, but no interactions - Find simplest representation of UI state for each component - Identify where state should live - Add inverse data flow (changes go back up)</p>"},{"location":"recitations/reci3-react/#component-librariesframeworks","title":"Component Libraries/Frameworks","text":"<ul> <li>SUPER USEFUL (and fun to explore)</li> <li>You no longer have to style everything by hand (b/c CSS bad).</li> <li>Find one that you enjoy and read the docs on how to use it!</li> </ul> <p>Popular ones: - MaterialUI (google) - Bootstrap - Ant Design (Ant Financial, Alibaba) - Evergreen - We\u2019re gonna use Tailwind CSS</p>"},{"location":"recitations/reci3-react/#react-demo-app","title":"React demo app","text":"<ul> <li>Clone either the MongoDB or Postgres reference solution</li> <li>cd into server directory with <code>cd server</code></li> <li>Run <code>npm install</code> in command line</li> <li>Run <code>npm start</code> in command line</li> <li>cd into client directory with <code>cd client</code> from root directory</li> <li>Run <code>npm install</code> in command line</li> <li>Run <code>npm start</code> in command line</li> </ul>"},{"location":"recitations/reci4-github/","title":"Recitation #4 \u2013 GitHub Basics","text":""},{"location":"recitations/reci4-github/#what-is-github","title":"What is GitHub?","text":"<p>GitHub is a web-based version control platform that uses Git, a popular version control system. It is widely used by individuals, teams, and organizations to manage software development projects. GitHub also hosts many open-source projects and enterprise solutions.</p>"},{"location":"recitations/reci4-github/#why-use-github","title":"Why Use GitHub?","text":"<ul> <li>Collaboration \u2013 Multiple developers can work on the same project seamlessly.</li> <li>Version Control \u2013 Allows easy rollback and tracking of changes.</li> <li>Automated Deployment \u2013 Supports seamless automated solution deployment.</li> </ul>"},{"location":"recitations/reci4-github/#understanding-commits","title":"Understanding Commits","text":""},{"location":"recitations/reci4-github/#what-is-a-commit","title":"What is a commit?","text":"<p>A commit is a snapshot of changes in a codebase.</p>"},{"location":"recitations/reci4-github/#best-practices-for-commits","title":"Best Practices for Commits","text":"<ul> <li>Write meaningful commit messages \u2013 Clearly describe the change.</li> <li>Use atomic commits \u2013 Keep changes small and focused.</li> </ul>"},{"location":"recitations/reci4-github/#pull-requests","title":"Pull Requests","text":""},{"location":"recitations/reci4-github/#what-is-a-pull-request-pr","title":"What is a Pull Request (PR)?","text":"<p>A pull request is a code difference analysis tool that enables reviewing and merging changes into the main codebase.</p>"},{"location":"recitations/reci4-github/#review-process","title":"Review Process","text":"<ul> <li>Code approvals \u2013 Ensure quality and correctness.</li> <li>Comments for feedback \u2013 Encourage discussion and improvements.</li> </ul>"},{"location":"recitations/reci4-github/#linking-issues-to-pull-requests","title":"Linking Issues to Pull Requests","text":""},{"location":"recitations/reci4-github/#what-is-an-issue","title":"What is an issue?","text":"<p>An issue is a log of tasks, bug reports, and feature requests used to track development progress.</p>"},{"location":"recitations/reci4-github/#linking-issues-to-prs","title":"Linking Issues to PRs","text":"<ul> <li>Use keywords like <code>Fixes #21</code> or <code>Closes #42</code> in PR descriptions.</li> <li>Improves traceability and automates issue closure upon merging.</li> </ul>"},{"location":"recitations/reci4-github/#managing-releases","title":"Managing Releases","text":""},{"location":"recitations/reci4-github/#what-is-a-release","title":"What is a release?","text":"<p>A versioned snapshot of the code after key milestones.</p>"},{"location":"recitations/reci4-github/#key-aspects-of-releases","title":"Key Aspects of Releases","text":"<ul> <li>Tagging versions \u2013 Use versioning strategies like Semantic Versioning (<code>v1.0.0</code>).</li> <li>Drafting release notes \u2013 Document key changes and improvements.</li> <li>Attaching binaries \u2013 Include compiled files if necessary.</li> </ul>"},{"location":"recitations/reci4-github/#good-coding-practices","title":"Good Coding Practices","text":""},{"location":"recitations/reci4-github/#branching-strategies","title":"Branching Strategies","text":"<ul> <li>Git Flow \u2013 Main branch with feature and hotfix branches.</li> <li>Feature Branching \u2013 Separate branches for new features.</li> <li>Hotfixes \u2013 Patches for critical issues.</li> </ul>"},{"location":"recitations/reci4-github/#commit-and-pr-guidelines","title":"Commit and PR Guidelines","text":"<ul> <li>Clear, concise commit messages</li> <li>Descriptive PRs with context and explanation</li> </ul>"},{"location":"recitations/reci4-github/#code-review-etiquette","title":"Code Review Etiquette","text":"<ul> <li>Provide constructive feedback</li> <li>Encourage respectful discussions</li> </ul>"},{"location":"recitations/reci4-github/#introduction-to-github-actions","title":"Introduction to GitHub Actions","text":"<p>GitHub Actions is an automation tool for CI/CD workflows.</p>"},{"location":"recitations/reci4-github/#triggers-for-workflows","title":"Triggers for Workflows","text":"<ul> <li>Push and Pull Requests \u2013 Automate actions based on repository events.</li> <li>Jobs and Steps \u2013 Define a sequence of automated actions.</li> </ul>"},{"location":"recitations/reci4-github/#common-use-cases","title":"Common Use Cases","text":"<ul> <li>Automated Testing \u2013 Run unit tests on new commits.</li> <li>Automated Deployment \u2013 Deploy code to production or staging environments.</li> <li>Code Linting \u2013 Enforce coding standards automatically.</li> </ul>"},{"location":"recitations/reci4-github/#practice","title":"Practice","text":"<p>To apply these concepts, follow the steps below:</p> <ol> <li>Fork the repository: simple-calculator</li> <li>Set up the application locally.</li> <li>Create an issue (e.g., \"Developer Log\") to track your changes.</li> <li>Create a Pull Request (PR) that adds a <code>console.log</code> whenever a calculation takes place.</li> <li>Link the issue to the PR using GitHub keywords.</li> <li>Merge the PR once approved.</li> </ol>"},{"location":"recitations/reci4-testing/","title":"Recitation 4: Testing + Git Flow","text":""},{"location":"recitations/reci4-testing/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci4-testing/#git-flow","title":"Git Flow","text":""},{"location":"recitations/reci4-testing/#git-operations","title":"Git Operations","text":"<ul> <li>Clone - Copies a repository from a remote source to your local machine</li> <li>Checkout - Switches between different branches </li> <li>Add - Stages changes in the working directory </li> <li>Commit - Records changes to the repository</li> <li>Push - Uploads local repository changes to a remote repository</li> <li>Pull - Fetches changes from a remote repository and merges them into the local branch</li> <li>Merge - Combines changes from different branches into the current branch</li> </ul>"},{"location":"recitations/reci4-testing/#testing","title":"Testing","text":""},{"location":"recitations/reci4-testing/#jest","title":"jest","text":"<ul> <li>JavaScript testing framework developed by Facebook</li> <li>Great for testing both backend and frontend</li> <li>Built-in assertion libraries and mocking functionalities</li> <li>Easy to use!</li> </ul>"},{"location":"recitations/reci4-testing/#backend","title":"Backend","text":"<ul> <li> <p>Routes:</p> <ul> <li>Test routes behave as expected</li> <li>Response status</li> <li>Response data</li> <li>Works with database as expected (GET, PUT, POST, DELETE calls)</li> </ul> </li> <li> <p>Database:</p> <ul> <li>Test database behaves as expected</li> <li>Add data to database</li> <li>Update data in database</li> <li>Delete data in database</li> </ul> </li> </ul>"},{"location":"recitations/reci4-testing/#frontend","title":"Frontend","text":"<ul> <li>Components<ul> <li>Test if components appear</li> <li>Test if props are as expected</li> </ul> </li> <li>Functionalities<ul> <li>Buttons and client interactions perform/update UI as expected</li> </ul> </li> </ul>"},{"location":"recitations/reci4-testing/#lets-try-it-out","title":"Let's try it out!","text":"<ul> <li>Clone either the MongoDB or Postgres reference solution</li> <li>cd into a directory with <code>cd client</code> or <code>server</code></li> <li>Run <code>npm install --legacy-peer-deps</code> in command line</li> <li>Run <code>npm test</code> in command line</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/","title":"Recitation 5: Docker + Kubernetes","text":""},{"location":"recitations/reci5-docker-kubernetes/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/#virtual-machines","title":"Virtual Machines","text":"<ul> <li>Applications run inside a virtual \u201cguest\u201d machine</li> <li>Guest machine runs on a physical \u201chost\u201d machine</li> <li>Multiple guests can run on the same host machine</li> <li>Each guest has its own OS and functions independently</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/#virtual-machines-pros-and-cons","title":"Virtual Machines Pros and Cons","text":"<p>Pros: - Provide great isolation for applications - Problems in host OS rarely affect apps in guest OS and vice versa</p> <p>Cons: - Isolation comes at the expense of great computational cost - Significant overhead virtualizing hardware for guest OS</p>"},{"location":"recitations/reci5-docker-kubernetes/#containers","title":"Containers","text":"<ul> <li>Leverage low-level mechanics of host OS</li> <li>Provides most of the isolation of VMs at a fraction of the cost</li> </ul> <p>Encapsulate/package an application such that\u2026 - It is abstracted from the environment in which they run - Decoupling allows ease of deployment irrespective of the target environment    - Public cloud, private data center, or personal laptop - It is lightweight in terms of loading and transporting    - Granular control of resources to improve efficiency</p>"},{"location":"recitations/reci5-docker-kubernetes/#comparison-between-vms-and-containers","title":"Comparison between VMs and Containers","text":"<p>Similarities: - Both encapsulate your application</p> <p>Differences: - Size: containers are smaller in size as they do not contain the OS - Portability: Containers are more portable - OS: containers are constrained by the OS, while VMs are not - State: Containers are stateless by default and as such are more scalable</p>"},{"location":"recitations/reci5-docker-kubernetes/#when-to-use-containers","title":"When To Use Containers","text":"<ul> <li>Start times and startup speeds of your application is important</li> <li>Efficiency of resource utilization is a priority (consuming less RAM and CPU)</li> <li>Budget constraints are a limitation (Docker and Kubernetes are open source)</li> <li>Sharing container images is important (Docker images are easily shared)</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/#when-to-use-virtual-machines","title":"When To Use Virtual Machines","text":"<ul> <li>Highly concerned with security and want to isolate your environment (VMs provide full isolation by default)</li> <li>Having a rollback features is a priority (VMs can easily go back to a previous snapshot)</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/#docker","title":"Docker","text":""},{"location":"recitations/reci5-docker-kubernetes/#docker-overview","title":"Docker Overview","text":"<ul> <li>Platform as a service product to automate the deployment of software applications</li> <li>Applications are deployed in containers and can run on host OS</li> <li>Many docker containers can be run simultaneously on a single host</li> <li>Allows packaging of an application and its dependencies into a standardized unit</li> <li>Without reliance on the host</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/#docker-terminology","title":"Docker Terminology","text":"<ul> <li>Image - everything that is needed to configure a fully operational environment</li> <li>Container - a running instance of an image</li> <li>Dockerfile - definition/spec to create an image</li> <li>Container registry - system to host and distribute images</li> <li>Container repository - specific physical locations to store related images</li> </ul>"},{"location":"recitations/reci5-docker-kubernetes/#docker-compose","title":"Docker-compose","text":"<p>A tool for defining and running multi-container Docker applications - Configures your applications services Creates and starts all the services from the configuration file with a single command Run docker-compose up and the Docker compose command starts and runs the entire application (Render sadly doesn\u2019t support docker-compose \u2192 https://feedback.render.com/features/p/support-docker-compose)</p>"},{"location":"recitations/reci5-docker-kubernetes/#docker-demo","title":"Docker Demo","text":"<ul> <li>Creating an image using a Dockerfile</li> <li>Creating a container using the image</li> <li>Using docker-compose (running containers on different ports on the same machine)</li> </ul> <p>git clone https://github.com/CMU-17-356/example-docker-app.git docker-compose up Visit localhost:7004, localhost:7005, and localhost:7006</p>"},{"location":"recitations/reci5-docker-kubernetes/#kubernetes","title":"Kubernetes","text":"<p>Kubernetes is an open-source platform for automating the deployment, scaling, and operations of application containers - Horizontal scaling \u2192 easy to scale up or down - Self-healing \u2192 restarting failed containers - Service discovery \u2192 expose containers via DNS name or IP address - Automated rollouts/rollbacks \u2192 create new containers/remove existing ones - Load balancing \u2192 distribute network traffic across various containers - And more!</p>"},{"location":"recitations/reci5-fullstack-mern-app/","title":"Recitation 5: Fullstack MERN app","text":""},{"location":"recitations/reci5-fullstack-mern-app/#staff-overview","title":"Staff Overview","text":"<ul> <li>Mehul Agarwal &amp; Rohit Nanjangud Shreenivas</li> <li>Emails: mehula@andrew.cmu.edu &amp; rshreeni@andrew.cmu.edu</li> <li>Office Hours: Mehul(3:30 PM to 4:30 PM on Wednesdays) Rohit(5 PM to 6 PM on Fridays)</li> </ul>"},{"location":"recitations/reci5-fullstack-mern-app/#fullstack-mern-app","title":"Fullstack MERN app","text":"<ul> <li>git clone from: https://github.com/machadop1407/MERN-Beginners</li> <li><code>server</code> -- backend express app; runs on port 3001</li> <li><code>client</code> -- frontend react app; runs on port 3000</li> </ul>"},{"location":"recitations/reci5-fullstack-mern-app/#to-run-the-backend-server","title":"To run the backend server","text":"<ul> <li>The app uses mongodb and this needs to be configured</li> <li>We've used mongoose library for ODM and interacting with the db</li> <li>On line 14, <code>mongoose.connect(&lt;mongodb-atlas-url&gt;);</code> you need to replace the url with your mongodb url</li> <li>To setup a cloud mongodb, go to <code>https://www.mongodb.com/atlas/database</code>, setup a free tier db and get the connection link</li> <li>Your URL should look something similar to this: <code>mongodb+srv://&lt;username&gt;:&lt;password&gt;@mers-fs-app.xg3etjm.mongodb.net/&lt;dbname&gt;?retryWrites=true&amp;w=majority;</code></li> <li>Once you set this up, you can use <code>node index.js</code> from the <code>server</code> directory to bring up the backend server</li> </ul>"},{"location":"recitations/reci5-fullstack-mern-app/#to-run-the-frontend-server","title":"To run the frontend server","text":"<ul> <li><code>cd client</code></li> <li>Delete the <code>package-lock.json</code></li> <li><code>npm install</code> to install the required dependencies</li> <li><code>NODE_OPTIONS=--openssl-legacy-provider npm start</code> to bring up the frontend server. The extra flag is to avoid some legacy dependency issue</li> </ul>"},{"location":"recitations/reci5-fullstack-mern-app/#reference","title":"Reference","text":"<ul> <li>https://www.youtube.com/@PedroTechnologies</li> </ul>"},{"location":"recitations/reci5-testing/","title":"Recitation #5","text":""},{"location":"recitations/reci5-testing/#17-35617-766","title":"17-356/17-766","text":""},{"location":"recitations/reci5-testing/#unit-testing","title":"Unit Testing","text":"<ul> <li>Testing individual components or units of code in isolation.</li> <li>A unit can be a function, method, or class.</li> <li>Why Unit Testing?</li> <li>Easy to define scope and logic.</li> <li>Catches bugs early in the development cycle.</li> <li>Facilitates refactoring and maintenance.</li> </ul>"},{"location":"recitations/reci5-testing/#jest","title":"Jest","text":"<ul> <li>JavaScript testing framework developed by Facebook</li> <li>Great for testing both backend and frontend</li> <li>Built-in assertion libraries and mocking functionalities</li> <li>Easy to use!</li> </ul>"},{"location":"recitations/reci5-testing/#why-test-everything-even-simple-logic","title":"Why Test Everything? Even Simple Logic","text":"<ul> <li>Future-Proofing</li> <li>Refactoring Safety</li> <li>Edge Cases</li> <li>Different data type: JSON, null, None, undefined, empty strings, or unexpected objects.</li> <li>Unpredictable behaviors: clicking button 1000 times, rapid API calls</li> <li>Boundary Conditions: integer overflow</li> <li>Concurrency Issues</li> </ul>"},{"location":"recitations/reci5-testing/#async-functions","title":"Async Functions","text":"<ul> <li>Always use await and tools like waitFor to test async functions.</li> <li>Example: handle API calls or delayed updates</li> </ul>"},{"location":"recitations/reci5-testing/#frontend-unit-test","title":"Frontend Unit Test","text":"<ul> <li>Interact with component: (e.g., Click, Submit forms)</li> <li>Styling and Layout</li> <li>Write test for styling and properties if it is critical to functionality (e.g., a disabled button color).</li> <li>Avoid testing purely visual aspects; use visual regression tools instead.</li> <li>Test Error code as well</li> </ul>"},{"location":"recitations/reci5-testing/#tdd-worth-the-hype-or-overkill","title":"TDD: Worth the Hype or Overkill","text":"<ul> <li>Pros</li> <li>Ensures testable design.</li> <li>Prevents engineers from deleting failing tests when bugs arise.</li> <li>Cons</li> <li>Can slow down development, especially in fast-paced startups.</li> <li>May feel restrictive for exploratory or prototype-driven projects.</li> <li>Solution</li> <li>Use TDD for critical components.</li> <li>Avoid focusing too much on testing coding style.</li> <li>Use AI tools to generate code based on test cases?</li> </ul>"},{"location":"recitations/reci5-testing/#how-do-we-know-we-test-everything","title":"How Do We Know We Test Everything?","text":"<ul> <li>Black Box Testing</li> <li>Focuses on all the possible input and output without knowing internal logic.</li> <li>Tests functionality from the user\u2019s perspective.</li> <li>White Box Testing</li> <li>Tests all internal structures and code.</li> <li>Ensures all paths, branches, and conditions are covered</li> </ul>"},{"location":"recitations/reci5-testing/#how-to-test-randomness","title":"How to Test Randomness","text":"<ul> <li>Use a fixed seed to make random behavior deterministic.</li> <li>Test Range or Distribution.</li> <li>Verify that outputs fall within expected ranges.</li> <li>Mock Randomness function.</li> <li>Run several times, and make sure there\u2019s no pattern between them</li> </ul>"},{"location":"recitations/reci5-testing/#mocking-isolating-your-tests","title":"Mocking: Isolating Your Tests","text":"<ul> <li>Simulating the behavior of real objects or services.</li> <li>Common Use Cases:</li> <li>API calls.</li> <li>Database queries.</li> <li>Components that the output is hard to predict (e.g., time-dependent functions, randomness, AI algorithms)</li> <li>Why Mock?</li> <li>Speed</li> <li>Reliability &amp; Easy to debug</li> <li>Simulate specific scenarios (e.g., errors, timeouts)</li> <li>Avoid Extra Costs</li> <li>Examples     <pre><code>jest.mock(\"axios\");\n\nbeforeEach(() =&gt; {\n  axios.mockClear(); // Clear previous mocks before each test\n});\n\ntest(\"clicking (8 + 9 =) results in (17)\", async () =&gt; {\n  // Mock Axios response\n  axios.post.mockResolvedValueOnce({\n    data: { result: \"17\" }, // Mock response data\n  });\n});\n</code></pre></li> </ul>"},{"location":"recitations/reci6-databases-storage/","title":"Recitation 6: Databases + Storage","text":""},{"location":"recitations/reci6-databases-storage/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci6-databases-storage/#overview","title":"Overview","text":""},{"location":"recitations/reci6-databases-storage/#database","title":"Database","text":"<ul> <li>An organized collection of data that models something</li> <li>Commonly used interchangeably to describe database management systems</li> </ul>"},{"location":"recitations/reci6-databases-storage/#dbms","title":"DBMS","text":"<ul> <li>The software that manages a database</li> <li>Used for defining, creating, querying, updating, etc. data records</li> <li>Relational, NoSQL, Vector</li> </ul> <p>## SQL vs NoSQL   </p>"},{"location":"recitations/reci6-databases-storage/#acid-properties","title":"ACID Properties","text":"<p>Atomicity - either all operations of the transaction are reflected in the database or none are</p> <p>Consistency - each transaction preserves the integrity of the data</p> <p>Isolation - each transaction executes as if it were the only one reading/writing data</p> <p>Durability - after a transaction completes successfully, the changes are permanent even in the existence of system failures</p>"},{"location":"recitations/reci6-databases-storage/#relational-postgres","title":"Relational (Postgres)","text":"<ul> <li>Tables, rows, columns, primary/foreign keys, etc.</li> </ul>"},{"location":"recitations/reci6-databases-storage/#postgresql","title":"PostgreSQL","text":"<ul> <li>Free and open source</li> <li>ACID compliant</li> <li>Highly extensible and supports custom data types and custom functions</li> <li>Supports a wide variety of programming languages with strong developer communities making development pretty painless</li> </ul>"},{"location":"recitations/reci6-databases-storage/#distributed-sql-cockroachyugabyte","title":"Distributed SQL (Cockroach/Yugabyte)","text":"<p>Provide the scalability of NoSQL DBs with the ACID properties of SQL DBs - Resilient to failures as data is replicated and distributed across many servers - SQL compatible - All nodes are able to read and write data - Utilize consensus algorithms like Raft and Paxos to reach agreement</p> <p>Typically more expensive than legacy SQL systems because of its distributed nature</p> <p>You can use packages like Sequelize and typeORM by just changing your connection string!</p>"},{"location":"recitations/reci6-databases-storage/#document-mongodb","title":"Document (MongoDB)","text":"<ul> <li>Tables are collections, rows are documents, and there are no columns</li> <li>No data schemas/relationships necessary</li> <li>JSON document structure makes development process seamless as it easily maps to Javascript, Python, and many other languages objects</li> <li>Provides horizontal scalability through sharding/partitioning data across different nodes</li> <li>Heavily developer focused with vibrant dev communities</li> </ul> <p>Popular use cases include real time analytics, IoT applications, time series data, and more</p>"},{"location":"recitations/reci6-databases-storage/#wide-column-cassandra","title":"Wide-column (Cassandra)","text":"<ul> <li>Free, open source NoSQL distributed DBMS by Apache</li> <li>Column based instead of row based</li> <li>No schemas or joins</li> </ul> <p>Video Links: https://www.youtube.com/watch?v=p18s8Ckn5H4 &amp; https://www.youtube.com/watch?v=ziq7FUKpCS8</p>"},{"location":"recitations/reci6-databases-storage/#graph-neo4j","title":"Graph (Neo4j)","text":"<ul> <li>Nodes are entities/objects which can have labels to classify them</li> <li>Relationships are connections between nodes which have a direction</li> <li>Both nodes and relationships can have properties which are key-value pairs to describe them</li> </ul> <p>Video Link: https://www.youtube.com/watch?v=T6L9EoBy8Zk</p>"},{"location":"recitations/reci6-databases-storage/#cachekey-value-redis","title":"Cache/Key-Value (Redis)","text":"<ul> <li>Data stored in slower databases or those experiencing high load can be retrieved very quickly through the use of a cache</li> <li>Typically sits between applications and the primary database to provide a layer of speed and performance for common operations</li> <li>Get by  and set by  are the two most commonly used operations <p>Redis is now a multi-modal database and can be used for a wide variety of functions including as a primary database</p>"},{"location":"recitations/reci6-databases-storage/#vector-pinecone","title":"Vector (Pinecone)","text":"<ul> <li>Indexes and stores vector embeddings for fast retrieval and search</li> <li>With vector embeddings, you can search images and audio recordings, support retrieval augmented generations (RAG) for LLMs, and much more</li> </ul> <p>Video Link: https://www.youtube.com/watch?v=dN0lsF2cvm4  </p>"},{"location":"recitations/reci6-databases-storage/#object-storage-s3","title":"Object Storage (S3)","text":"<ul> <li>Objects are the data and buckets are the folders that contain the objects</li> <li>Used to store any type of data such as images, videos, text, etc.</li> <li>Can be pointed at from a traditional database to display images, videos, etc.</li> </ul> <p>Object storage like AWS S3 provides 11 nines of data durability (i.e. virtually no data loss or corruption) \u2192 1 billion objects over 100 hundred years without losing anyone</p> <p></p> <p></p> <p></p>"},{"location":"recitations/reci6-databases-storage/#browser-storage","title":"Browser Storage","text":""},{"location":"recitations/reci6-databases-storage/#local-storage","title":"Local Storage","text":"<ul> <li>Data is stored in the browser/system meaning that it will exist even when the browser/computer is closed</li> <li>However this data is accessible by other sites</li> </ul>"},{"location":"recitations/reci6-databases-storage/#session-storage","title":"Session Storage","text":"<ul> <li>Data only persists while the tab is open and on refresh is deleted</li> <li>More secure since the data is only available to that specific site</li> </ul>"},{"location":"recitations/reci6-databases-storage/#cookies","title":"Cookies","text":"<ul> <li>Good for storing things like session IDs and other data that don\u2019t have to be persisted for a long time</li> <li>You can set an expiration date/duration for how long you want it to exist and then will be deleted</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/","title":"Recitation 7: Mobile + React Native","text":""},{"location":"recitations/reci7-mobile-react-native/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#react-native","title":"React Native","text":"<ul> <li>Framework developed by Facebook</li> <li>Allows building mobile applications using JavaScript and React</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#benefits","title":"Benefits","text":"<ul> <li>Cross-Platform Compatibility - Develop for iOS and Android with a single codebase</li> <li>Native Look and Feel - Utilizes native components for a seamless user experience</li> <li>Fast Development - Write code once, deploy everywhere, reducing development time</li> <li>Community Support - Large community and ecosystem for resources and assistance</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#usage-of-react-native","title":"Usage of React Native","text":"<ul> <li>Developers write code in JavaScript and React Native translates this code into native components, which are rendered for a mobile UI</li> <li>React Native is used to:</li> <li>Develop mobile applications</li> <li>Quickly build prototypes</li> <li>Develop MVP\u2019s to validate concepts and gather user feedback</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#more-about-react-native","title":"More about React Native","text":""},{"location":"recitations/reci7-mobile-react-native/#swift","title":"Swift","text":"<ul> <li>Swift is a powerful and intuitive programming language developed by Apple</li> <li>Designed for building apps for iOS, macOS, watchOS, and tvOS</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#key-features","title":"Key Features","text":"<ul> <li>Safety - Offers built-in safeguards to prevent errors and improve code reliability</li> <li>Speed - Optimized for performance, allowing developers to write fast and efficient code</li> <li>Expressive - Concise syntax and modern features enhance readability and maintainability</li> <li>Interoperability - Seamlessly works with Objective-C, allowing integration with existing codebases</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#more-about-swift","title":"More about Swift","text":""},{"location":"recitations/reci7-mobile-react-native/#kotlin","title":"Kotlin","text":"<ul> <li>Kotlin is a statically typed programming language developed by JetBrains</li> <li>Officially supported by Google for Android development since 2017</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#key-features_1","title":"Key Features","text":"<ul> <li>Conciseness - Reduces boilerplate code, making development more efficient</li> <li>Safety - Provides null safety features to prevent common runtime errors</li> <li>Interoperability - Seamlessly integrates with existing Java code and libraries</li> <li>Kotlin is compiled to bytecode like Java</li> <li>Functional Programming - Supports functional programming paradigms for cleaner code</li> </ul>"},{"location":"recitations/reci7-mobile-react-native/#more-about-kotlin","title":"More about Kotlin","text":""},{"location":"recitations/reci7-mobile-react-native/#react-native-expo-demo","title":"React Native Expo Demo","text":"<ol> <li>Download the Expo Go app on your smartphone</li> <li>git clone https://github.com/CMU-17-356/react-native-todo-app</li> <li>yarn install</li> <li>yarn start</li> <li>Either view by scanning QR code on your mobile device or use a simulator on your computer</li> </ol>"},{"location":"recitations/reci8-responsive-sites/","title":"Recitation 8: Responsive Sites + Accessibility","text":""},{"location":"recitations/reci8-responsive-sites/#staff-overview","title":"Staff Overview","text":"<ul> <li>Nicholas Wernink &amp; Alex Barrios</li> <li>Emails: ngw@andrew.cmu.edu &amp; ambarrio@andrew.cmu.edu</li> <li>Office Hours: Wed 2:30 - 4pm (Nicholas), Thu 12pm - 1pm (Alex)</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#what-does-it-mean-to-be-responsive","title":"What does it mean to be responsive?","text":""},{"location":"recitations/reci8-responsive-sites/#responsive-web-design","title":"Responsive Web Design","text":"<ul> <li>Responsive design is an approach to web design and development that aims to create websites and applications that provide an optimal viewing and interaction experience across a wide range of devices and screen sizes, like desktop computers, tablets, smartphones, etc.</li> <li>Websites and applications can provide a consistent and user-friendly experience across various devices, which improves accessibility, usability, and engagement</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#frameworks","title":"Frameworks","text":"<ul> <li>Bootstrap - Developed by Twitter, Bootstrap is one of the most widely used responsive design frameworks. It provides a comprehensive set of pre-built components, such as grids, navigation bars, buttons, forms, and more, along with extensive documentation and customization options</li> <li>Materialize CSS - Based on Google's Material Design guidelines, Materialize CSS offers a modern and responsive design framework with pre-styled components and animations. It provides a grid system, CSS utilities, and JavaScript components to create visually appealing and functional websites</li> <li>Tailwind CSS - Tailwind CSS is a utility-first CSS framework that enables developers to build responsive designs by composing utility classes directly in HTML. It offers a low-level utility API, responsive design features, and customization options to create unique and maintainable styles</li> <li>And many more!</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#example","title":"Example","text":"<p>Example Link As you can see, resizing the window does not negatively affect the user experience on the website. You can also try this by resizing the window of your browser and observing if the website components resize!</p>"},{"location":"recitations/reci8-responsive-sites/#accessibility","title":"Accessibility","text":"<ul> <li>Website is designed and developed in a way that allows all users, including those with disabilities, to perceive, understand, navigate, and interact with the content effectively</li> <li>Accessibility involves removing barriers that might prevent people with disabilities from accessing information or using features on a website</li> <li>The Web Content Accessibility Guidelines (WCAG) are web accessibility guidelines published by the Web Accessibility Initiative of the World Wide Web Consortium (the main international standards organization for the Internet), which sets a standard of how websites should be accessible</li> </ul> <p>Try searching \u2018website accessibility\u2019 on Google!</p>"},{"location":"recitations/reci8-responsive-sites/#key-accessibility-aspects","title":"Key Accessibility Aspects","text":""},{"location":"recitations/reci8-responsive-sites/#perceivability","title":"Perceivability","text":"<ul> <li>Content should be presented in a way that users can perceive it through various senses</li> <li>This includes providing text alternatives for non-text content such as images, videos, and audio</li> <li>This ensure that multimedia content is accessible to users who may not be able to hear or see it</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#operability","title":"Operability","text":"<ul> <li>Users should be able to navigate and interact with the website using a variety of input methods</li> <li>This includes keyboards, mice, touchscreens, and assistive technologies such as screen readers and speech recognition software</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#understandability","title":"Understandability","text":"<ul> <li>Content should be presented in a clear and understandable manner</li> <li>Websites should have predictable navigation and consistent design patterns</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#robustness","title":"Robustness","text":"<ul> <li>Websites should be built using technologies that are compatible with a wide range of user agents and assistive technologies. A variety of browsers (e.g. Chrome, Firefox, Safari, Edge, etc.) Screen readers, braille terminals, etc.</li> <li>Content and code of websites should be well-formed meaning that all HTML tags are closed and are properly nested within each other</li> </ul>"},{"location":"recitations/reci8-responsive-sites/#try-it-out","title":"Try it out!","text":"<p>Many websites have an accessibility section where you can learn more about how they meet the 4 key aspects of accessibility</p> <p>For example, take a look at this: https://www.bbc.co.uk/accessibility/</p>"},{"location":"recitations/reci9-react-native/","title":"Recitation 9 - React Native","text":""},{"location":"recitations/reci9-react-native/#staff-overview","title":"Staff Overview","text":"<ul> <li>Mehul Agarwal &amp; Rohit Nanjangud Shreenivas</li> <li>Emails: mehula@andrew.cmu.edu &amp; rshreeni@andrew.cmu.edu</li> <li>Office Hours: Mehul(3:30 PM to 4:30 PM on Wednesdays) Rohit(5 PM to 6 PM on Fridays)</li> </ul>"},{"location":"recitations/reci9-react-native/#before-react-native","title":"Before React Native","text":"<ul> <li>Writing and maintaining of code for multiple platforms was daunting</li> <li>Needed to write separate code for different platforms</li> <li>Resulted in longer software development cycles</li> <li>Higher costs and higher resource consumption</li> </ul>"},{"location":"recitations/reci9-react-native/#react-native","title":"React Native","text":"<ul> <li>Open-source framework for building cross-platform mobile applications using JavaScript and React</li> <li>Created by Facebook in 2015</li> <li>Uses native components, better performance, seamless UX</li> <li>Hot reloading, strong community support, easy to start</li> </ul>"},{"location":"recitations/reci9-react-native/#javascriptcore","title":"JavascriptCore","text":"<p>The JavaScriptCore Framework provides the ability to evaluate JavaScript programs from within Swift, Objective-C, and C-based apps. You can use also use JavaScriptCore to insert custom objects to the JavaScript environment.</p> <ul> <li>In most cases, React Native will use Hermes, an open-source JavaScript engine optimized for React Native.</li> <li>If Hermes is disabled, React Native will use JavaScriptCore, the JavaScript engine that powers Safari.</li> <li>When using Chrome debugging, all JavaScript code runs within Chrome itself, communicating with native code via WebSockets.</li> </ul>"},{"location":"recitations/reci9-react-native/#threading-model","title":"Threading model","text":"<p>The React Native renderer distributes the work of the render pipeline across multiple threads. - UI Thread (native rendering) - JS Thread (logic / batched updates) - Native Modules Thread (platform APIs) - Render Thread (only Android / OpenGL)</p>"},{"location":"recitations/reci9-react-native/#react-native-bridge","title":"React Native Bridge","text":"<p>React Native Bridge is a communication channel that enables communication between the JavaScript code running on the main thread and the platform-specific native modules running on a separate thread.</p> <p>The bridge allows the JavaScript code to invoke native modules and receive the results back.</p>"},{"location":"recitations/reci9-react-native/#code-example","title":"Code example","text":""},{"location":"recitations/reci9-react-native/#hello-world","title":"Hello World!","text":"<ul> <li>https://expo.github.io/router/docs/</li> <li>npx create-expo-app@latest --example with-router ./</li> <li>Create a app folder with _layout.js and index.js</li> <li>npm start</li> <li>npm install -g expo-cli followed by expo-cli start \u2013tunnel</li> <li>Run this on your phone using the Expo Go app</li> </ul>"},{"location":"recitations/reci9-react-native/#reference","title":"Reference","text":"<p>https://youtu.be/mJ3bGvy0WAY</p>"}]}